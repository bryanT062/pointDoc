[
  {
    "name": "HTML",
    "description": "HTML (HyperText Markup Language) est le langage de balisage standard utilisé pour créer la structure et le contenu des pages web. Il permet de définir des éléments tels que titres, paragraphes, images, liens, formulaires, et bien plus encore.",
    "articles": [
      {
        "title": "Introduction au HTML",
        "description": "<h1>HTML est le langage de balisage standard pour la création de pages Web.</h1>\n\n<h2>Qu'est-ce que HTML ?</h2>\n<p>HTML signifie <strong>Hyper Text Markup Language</strong>.</p>\n<p>HTML est le langage de balisage standard pour la création de pages Web. Il décrit la structure d'une page Web en se composant d'une série d'éléments.</p>\n<p>Les éléments HTML indiquent au navigateur comment afficher le contenu. Par exemple, ils étiquettent des éléments comme <em>« ceci est un titre »</em>, <em>« ceci est un paragraphe »</em>, <em>« ceci est un lien »</em>, etc.</p>\n\n<h2>Un document HTML simple</h2>\n<p>Exemple :</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Page Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;My First Heading&lt;/h1&gt;\n  &lt;p&gt;My first paragraph.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h2>Exemple expliqué</h2>\n<p>La déclaration <code>&lt;!DOCTYPE html&gt;</code> définit que ce document est un document HTML5.</p>\n<p>L'élément <code>&lt;html&gt;</code> est l'élément racine d'une page HTML.</p>\n<p>L'élément <code>&lt;head&gt;</code> contient des méta-informations sur la page HTML.</p>\n<p>L'élément <code>&lt;title&gt;</code> spécifie un titre pour la page HTML (qui s'affiche dans la barre de titre du navigateur ou dans l'onglet de la page).</p>\n<p>L'élément <code>&lt;body&gt;</code> définit le corps du document et constitue un conteneur pour tout le contenu visible.</p>\n<p>L'élément <code>&lt;h1&gt;</code> définit un grand titre.</p>\n<p>L'élément <code>&lt;p&gt;</code> définit un paragraphe.</p>\n\n<h2>Qu'est-ce qu'un élément HTML ?</h2>\n<p>Un élément HTML est défini par une balise de début, du contenu et une balise de fin :</p>\n<p><code>&lt;tagname&gt; Le contenu va ici... &lt;/tagname&gt;</code></p>\n<p>L'élément HTML est tout, de la balise de début à la balise de fin :</p>\n<p><code>&lt;h1&gt; Mon premier titre &lt;/h1&gt;</code></p>\n<p><code>&lt;p&gt; Mon premier paragraphe. &lt;/p&gt;</code></p>\n\n<p><strong>Start tag</strong> &nbsp;&nbsp; <strong>Element content</strong> &nbsp;&nbsp; <strong>End tag</strong></p>\n<table border=\"1\">\n  <tr><td>&lt;h1&gt;</td><td>My First Heading</td><td>&lt;/h1&gt;</td></tr>\n  <tr><td>&lt;p&gt;</td><td>My first paragraph.</td><td>&lt;/p&gt;</td></tr>\n  <tr><td>&lt;br&gt;</td><td>none</td><td>none</td></tr>\n</table>\n\n<p><em>Remarque :</em> Certains éléments HTML n'ont aucun contenu (comme l'élément <code>&lt;br&gt;</code>). Ces éléments sont appelés éléments vides. Ils n'ont pas de balise de fin !</p>\n\n<h2>Navigateurs Web</h2>\n<p>Le but d'un navigateur Web (Chrome, Edge, Firefox, Safari) est de lire des documents HTML et de les afficher correctement.</p>\n<p>Un navigateur n'affiche pas les balises HTML, mais les utilise pour déterminer comment afficher le document :</p>\n<p><strong>Afficher dans le navigateur</strong></p>\n\n<h2>Structure de la page HTML</h2>\n<p>Vous trouverez ci-dessous une visualisation de la structure d’une page HTML :</p>\n<pre><code>&lt;html&gt;\n&lt;tête&gt;\n&lt;title&gt;Titre de la page&lt;/title&gt;\n&lt;/head&gt;\n&lt;corps&gt;\n&lt;h1&gt;Ceci est un titre&lt;/h1&gt;\n&lt;p&gt;Ceci est un paragraphe.&lt;/p&gt;\n&lt;p&gt;Ceci est un autre paragraphe.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>Remarque : Le contenu de la section <code>&lt;body&gt;</code> s'affichera dans un navigateur. Le contenu de l'élément <code>&lt;title&gt;</code> s'affichera dans la barre de titre du navigateur ou dans l'onglet de la page.</p>"

},{
  "title": "Éléments HTML",
  "description": "<p>Un élément HTML est la pierre angulaire d'un document HTML. Il est défini par une balise d'ouverture, du contenu et une balise de fermeture.</p>\n\n<h2>Structure d'un élément HTML</h2>\n<p>Un élément typique se présente comme suit :</p>\n<pre><code>&lt;tagname&gt;contenu&lt;/tagname&gt;</code></pre>\n\n<p>Exemple :</p>\n<pre><code>&lt;p&gt;Ceci est un paragraphe.&lt;/p&gt;</code></pre>\n\n<h2>Éléments vides</h2>\n<p>Certains éléments n'ont pas de contenu ni de balise de fermeture, ils sont appelés éléments vides :</p>\n<ul>\n  <li><code>&lt;br&gt;</code> : saut de ligne</li>\n  <li><code>&lt;img&gt;</code> : image</li>\n  <li><code>&lt;input&gt;</code> : champ de formulaire</li>\n</ul>\n\n<h2>Imbrication des éléments</h2>\n<p>Les éléments peuvent être imbriqués les uns dans les autres pour structurer la page :</p>\n<pre><code>&lt;div&gt;\n  &lt;h1&gt;Titre&lt;/h1&gt;\n  &lt;p&gt;Paragraphe sous le titre.&lt;/p&gt;\n&lt;/div&gt;</code></pre>\n\n<h2>Exemple complet</h2>\n<p>Voici un document HTML simple illustrant plusieurs éléments :</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Exemple Élément HTML&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Titre principal&lt;/h1&gt;\n  &lt;p&gt;Ceci est un paragraphe.&lt;/p&gt;\n  &lt;br&gt;\n  &lt;img src=\"image.jpg\" alt=\"Description de l'image\"&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h2>Règles importantes</h2>\n<ul>\n  <li>Les éléments doivent être correctement fermés, sauf les éléments vides.</li>\n  <li>Les balises doivent être correctement imbriquées.</li>\n  <li>Les noms de balises ne sont pas sensibles à la casse, mais on recommande d’utiliser des minuscules.</li>\n</ul>"
},{
  "title": "Attributs HTML",
  "description": "<h1>Les Attributs HTML</h1>\n<p>Les attributs HTML fournissent des informations supplémentaires sur les éléments HTML. Ils sont toujours placés dans la balise d'ouverture d’un élément.</p>\n\n<h2>Syntaxe des attributs</h2>\n<p>Un attribut est constitué d’un nom et d’une valeur, séparés par un signe égal, et la valeur est toujours entre guillemets :</p>\n<pre><code>&lt;tagname attribut=\"valeur\"&gt;contenu&lt;/tagname&gt;</code></pre>\n\n<p>Exemple :</p>\n<pre><code>&lt;a href=\"https://www.example.com\"&gt;Lien vers example.com&lt;/a&gt;</code></pre>\n\n<h2>Attributs communs</h2>\n<ul>\n  <li><code>id</code> : identifiant unique pour l’élément.</li>\n  <li><code>class</code> : classes CSS assignées à l’élément.</li>\n  <li><code>style</code> : styles CSS en ligne.</li>\n  <li><code>title</code> : texte affiché au survol de l’élément.</li>\n  <li><code>href</code> : URL pour les liens (<code>&lt;a&gt;</code>).</li>\n  <li><code>src</code> : source d’image pour <code>&lt;img&gt;</code>.</li>\n  <li><code>alt</code> : texte alternatif pour les images.</li>\n</ul>\n\n<h2>Exemple d’utilisation des attributs</h2>\n<pre><code>&lt;img src=\"photo.jpg\" alt=\"Une photo de paysage\" title=\"Paysage\"&gt;\n&lt;a href=\"https://www.google.com\" target=\"_blank\"&gt;Google&lt;/a&gt;</code></pre>\n\n<h2>Attributs spécifiques</h2>\n<p>Certains éléments ont des attributs spécifiques, par exemple :</p>\n<ul>\n  <li><code>&lt;input&gt;</code> : <code>type</code>, <code>name</code>, <code>value</code>, <code>placeholder</code></li>\n  <li><code>&lt;form&gt;</code> : <code>action</code>, <code>method</code></li>\n</ul>\n\n<h2>Attributs booléens</h2>\n<p>Certains attributs n'ont pas de valeur, ils sont dits booléens :</p>\n<ul>\n  <li><code>disabled</code> (désactive un contrôle)</li>\n  <li><code>checked</code> (case cochée)</li>\n  <li><code>readonly</code> (lecture seule)</li>\n</ul>\n\n<h2>Bonnes pratiques</h2>\n<ul>\n  <li>Utiliser des noms d'attributs valides selon la spécification HTML.</li>\n  <li>Mettre les valeurs d'attributs entre guillemets doubles.</li>\n  <li>Ne pas répéter inutilement les attributs.</li>\n</ul>"
},{
  "title": "Les Paragraphes HTML",
  "description": "<h1>Les Paragraphes en HTML</h1>\n<p>Le paragraphe est un élément fondamental pour structurer le texte dans une page web. En HTML, il est représenté par la balise <code>&lt;p&gt;</code>.</p>\n\n<h2>Syntaxe</h2>\n<p>Un paragraphe s'écrit avec une balise ouvrante et une balise fermante :</p>\n<pre><code>&lt;p&gt;Ceci est un paragraphe.&lt;/p&gt;</code></pre>\n\n<h2>Rôle des paragraphes</h2>\n<ul>\n  <li>Délimiter les blocs de texte.</li>\n  <li>Permettre un espacement vertical automatique entre les paragraphes.</li>\n  <li>Améliorer la lisibilité du contenu pour les utilisateurs et les moteurs de recherche.</li>\n</ul>\n\n<h2>Contenu des paragraphes</h2>\n<p>Un paragraphe peut contenir du texte brut, des liens, des images en ligne, des balises <code>&lt;strong&gt;</code>, <code>&lt;em&gt;</code>, etc., mais il ne doit pas contenir d’éléments de bloc comme des <code>&lt;div&gt;</code> ou d’autres paragraphes.</p>\n\n<h2>Exemple</h2>\n<pre><code>&lt;p&gt;Bienvenue sur mon site web. &lt;strong&gt;Apprenez&lt;/strong&gt; à coder avec HTML.&lt;/p&gt;\n&lt;p&gt;Ce site contient des tutoriels et des exemples pratiques.&lt;/p&gt;</code></pre>\n\n<h2>Espacement et styles</h2>\n<p>Par défaut, les navigateurs ajoutent un espace vertical (marge) avant et après chaque paragraphe. Ceci peut être modifié avec CSS :</p>\n<pre><code>p {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}</code></pre>\n\n<h2>Accessibilité</h2>\n<p>Utiliser les paragraphes correctement aide les lecteurs d'écran et améliore l'expérience utilisateur globale.</p>\n\n<h2>Résumé</h2>\n<ul>\n  <li>Utilisez <code>&lt;p&gt;</code> pour structurer le texte en paragraphes.</li>\n  <li>Évitez d’imbriquer des éléments de bloc à l’intérieur des paragraphes.</li>\n  <li>Utilisez CSS pour ajuster l'apparence et l'espacement.</li>\n</ul>"
},{
  "title": "Les Titres HTML",
  "description": "<h1>Les Titres en HTML</h1>\n<p>Les titres permettent de structurer le contenu d’une page web en sections hiérarchisées. Ils vont de <code>&lt;h1&gt;</code> à <code>&lt;h6&gt;</code>, du plus important au moins important.</p>\n\n<h2>Syntaxe des titres</h2>\n<p>Chaque titre s'écrit avec une balise ouvrante et une balise fermante correspondante :</p>\n<pre><code>&lt;h1&gt;Titre principal&lt;/h1&gt;\n&lt;h2&gt;Sous-titre&lt;/h2&gt;\n&lt;h3&gt;Titre de section&lt;/h3&gt;</code></pre>\n\n<h2>Utilisation des niveaux de titres</h2>\n<ul>\n  <li><code>&lt;h1&gt;</code> : titre principal de la page, doit être unique.</li>\n  <li><code>&lt;h2&gt;</code> à <code>&lt;h6&gt;</code> : sous-titres de niveaux décroissants pour organiser le contenu.</li>\n</ul>\n\n<h2>Importance pour le SEO et l’accessibilité</h2>\n<p>Les moteurs de recherche utilisent les titres pour comprendre la structure du contenu. Les lecteurs d’écran utilisent aussi cette hiérarchie pour permettre une navigation efficace.</p>\n\n<h2>Exemple</h2>\n<pre><code>&lt;h1&gt;Bienvenue sur mon site&lt;/h1&gt;\n&lt;h2&gt;Présentation&lt;/h2&gt;\n&lt;p&gt;Voici le contenu de la présentation.&lt;/p&gt;\n&lt;h2&gt;Contact&lt;/h2&gt;\n&lt;p&gt;Voici les informations de contact.&lt;/p&gt;</code></pre>\n\n<h2>Styles par défaut</h2>\n<p>Les titres ont une taille de police décroissante de <code>h1</code> à <code>h6</code>, mais cela peut être modifié avec CSS.</p>\n\n<h2>Bonnes pratiques</h2>\n<ul>\n  <li>Utiliser un seul <code>&lt;h1&gt;</code> par page.</li>\n  <li>Respecter la hiérarchie des titres pour une structure claire.</li>\n  <li>Éviter de sauter des niveaux (pas de <code>h4</code> sans <code>h3</code> avant).</li>\n</ul>"
},{
  "title": "Les Liens HTML",
  "description": "<h1>Les Liens en HTML</h1>\n<p>Les liens hypertextes sont fondamentaux pour la navigation sur le web. Ils permettent de passer d'une page à une autre ou de diriger vers une ressource spécifique.</p>\n\n<h2>La balise &lt;a&gt;</h2>\n<p>En HTML, les liens sont créés avec la balise <code>&lt;a&gt;</code> (anchor).</p>\n<p>Syntaxe :</p>\n<pre><code>&lt;a href=\"URL\"&gt;Texte du lien&lt;/a&gt;</code></pre>\n\n<h2>Attributs importants</h2>\n<ul>\n  <li><code>href</code> : L'adresse URL vers laquelle pointe le lien.</li>\n  <li><code>target</code> : Où ouvrir le lien (<code>_blank</code> pour une nouvelle fenêtre/onglet).</li>\n  <li><code>title</code> : Un texte descriptif affiché au survol.</li>\n</ul>\n\n<h2>Exemples</h2>\n<pre><code>&lt;a href=\"https://www.example.com\"&gt;Visitez Example&lt;/a&gt;\n\n&lt;a href=\"page.html\" target=\"_blank\"&gt;Ouvrir dans un nouvel onglet&lt;/a&gt;</code></pre>\n\n<h2>Liens internes et externes</h2>\n<ul>\n  <li><strong>Interne :</strong> lien vers une autre page du même site (ex: <code>page.html</code>).</li>\n  <li><strong>Externe :</strong> lien vers un site différent (ex: <code>https://www.wikipedia.org</code>).</li>\n</ul>\n\n<h2>Accessibilité</h2>\n<p>Utilisez des textes de lien explicites pour aider les utilisateurs, notamment ceux utilisant des lecteurs d'écran.</p>\n\n<h2>Styles CSS pour les liens</h2>\n<p>Vous pouvez personnaliser l’apparence des liens :</p>\n<pre><code>a {\n  color: blue;\n  text-decoration: underline;\n}\n\na:hover {\n  color: red;\n}</code></pre>\n\n<h2>Résumé</h2>\n<ul>\n  <li>Utilisez la balise <code>&lt;a&gt;</code> avec l’attribut <code>href</code>.</li>\n  <li>Les liens peuvent pointer vers des ressources internes ou externes.</li>\n  <li>Ajoutez l’attribut <code>target=\"_blank\"</code> pour ouvrir dans un nouvel onglet.</li>\n  <li>Soignez le texte du lien pour l’accessibilité.</li>\n</ul>"
},{
  "title": "Les Images HTML",
  "description": "<h1>Les Images en HTML</h1>\n<p>Les images sont essentielles pour rendre une page web visuellement attractive et pour illustrer le contenu.</p>\n\n<h2>La balise &lt;img&gt;</h2>\n<p>En HTML, les images sont insérées avec la balise <code>&lt;img&gt;</code>, qui est une balise auto-fermante (pas de balise de fermeture).</p>\n\n<h2>Attributs principaux</h2>\n<ul>\n  <li><code>src</code> : L’URL ou chemin de l’image.</li>\n  <li><code>alt</code> : Texte alternatif qui décrit l’image, important pour l’accessibilité.</li>\n  <li><code>width</code> et <code>height</code> : Dimensions de l’image (en pixels).</li>\n</ul>\n\n<h2>Syntaxe</h2>\n<pre><code>&lt;img src=\"image.jpg\" alt=\"Description de l'image\" width=\"500\" height=\"300\" /&gt;</code></pre>\n\n<h2>Importance de l'attribut alt</h2>\n<p>L’attribut <code>alt</code> est utilisé par les lecteurs d’écran et s’affiche si l’image ne peut pas être chargée. Il améliore aussi le référencement SEO.</p>\n\n<h2>Images responsives</h2>\n<p>Pour rendre les images adaptatives, vous pouvez utiliser CSS :</p>\n<pre><code>img {\n  max-width: 100%;\n  height: auto;\n}</code></pre>\n\n<h2>Formats d’images courants</h2>\n<ul>\n  <li><code>.jpg</code> / <code>.jpeg</code> : bon pour les photos.</li>\n  <li><code>.png</code> : pour les images avec transparence.</li>\n  <li><code>.gif</code> : images animées.</li>\n  <li><code>.svg</code> : graphiques vectoriels, évolutifs sans perte de qualité.</li>\n</ul>\n\n<h2>Exemple complet</h2>\n<pre><code>&lt;img src=\"chat.png\" alt=\"Un chat mignon qui dort\" width=\"400\" /&gt;</code></pre>\n\n<h2>Résumé</h2>\n<ul>\n  <li>La balise <code>&lt;img&gt;</code> insère une image dans la page.</li>\n  <li>L’attribut <code>src</code> est obligatoire.</li>\n  <li>L’attribut <code>alt</code> est très important pour l’accessibilité.</li>\n  <li>Utilisez des styles CSS pour rendre les images responsives.</li>\n</ul>"
},{
  "title": "Les Listes HTML",
  "description": "<h1>Les Listes en HTML</h1>\n<p>Les listes sont utilisées pour organiser et présenter des groupes d’éléments similaires de manière ordonnée ou non ordonnée.</p>\n\n<h2>Types de listes</h2>\n<ul>\n  <li><strong>Listes non ordonnées (&lt;ul&gt;)</strong> : les éléments sont précédés de puces.</li>\n  <li><strong>Listes ordonnées (&lt;ol&gt;)</strong> : les éléments sont numérotés.</li>\n  <li><strong>Listes de définition (&lt;dl&gt;)</strong> : définissent des termes et leurs descriptions.</li>\n</ul>\n\n<h2>Listes non ordonnées</h2>\n<p>Syntaxe :</p>\n<pre><code>&lt;ul&gt;\n  &lt;li&gt;Élément 1&lt;/li&gt;\n  &lt;li&gt;Élément 2&lt;/li&gt;\n  &lt;li&gt;Élément 3&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n\n<h2>Listes ordonnées</h2>\n<p>Syntaxe :</p>\n<pre><code>&lt;ol&gt;\n  &lt;li&gt;Premier élément&lt;/li&gt;\n  &lt;li&gt;Deuxième élément&lt;/li&gt;\n  &lt;li&gt;Troisième élément&lt;/li&gt;\n&lt;/ol&gt;</code></pre>\n\n<h2>Listes de définition</h2>\n<p>Syntaxe :</p>\n<pre><code>&lt;dl&gt;\n  &lt;dt&gt;HTML&lt;/dt&gt;\n  &lt;dd&gt;Hyper Text Markup Language&lt;/dd&gt;\n  &lt;dt&gt;CSS&lt;/dt&gt;\n  &lt;dd&gt;Cascading Style Sheets&lt;/dd&gt;\n&lt;/dl&gt;</code></pre>\n\n<h2>Styles CSS pour les listes</h2>\n<p>Vous pouvez personnaliser les styles des listes :</p>\n<pre><code>ul {\n  list-style-type: disc; /* puces */\n}\n\nol {\n  list-style-type: decimal; /* numéros */\n}\n\nul.numbers {\n  list-style-type: decimal-leading-zero;\n}</code></pre>\n\n<h2>Résumé</h2>\n<ul>\n  <li>Utilisez <code>&lt;ul&gt;</code> pour une liste à puces.</li>\n  <li>Utilisez <code>&lt;ol&gt;</code> pour une liste numérotée.</li>\n  <li>Utilisez <code>&lt;dl&gt;</code> pour des listes de termes et définitions.</li>\n  <li>Chaque élément de liste est défini avec <code>&lt;li&gt;</code> (ou <code>&lt;dt&gt;/&lt;dd&gt;</code> pour <code>&lt;dl&gt;</code>).</li>\n</ul>"
},{
  "title": "Les Tableaux HTML",
  "description": "<h1>Les Tableaux en HTML</h1>\n<p>Les tableaux permettent de présenter des données tabulaires sous forme de lignes et de colonnes.</p>\n\n<h2>Structure d’un tableau HTML</h2>\n<p>Un tableau est défini avec la balise <code>&lt;table&gt;</code>. Il contient des lignes <code>&lt;tr&gt;</code> qui elles-mêmes contiennent des cellules.</p>\n\n<h2>Les cellules</h2>\n<ul>\n  <li><code>&lt;th&gt;</code> : cellule d’en-tête, généralement affichée en gras et centrée.</li>\n  <li><code>&lt;td&gt;</code> : cellule de données.</li>\n</ul>\n\n<h2>Exemple simple</h2>\n<pre><code>&lt;table border=\"1\"&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Nom&lt;/th&gt;\n    &lt;th&gt;Âge&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Alice&lt;/td&gt;\n    &lt;td&gt;25&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Bob&lt;/td&gt;\n    &lt;td&gt;30&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;</code></pre>\n\n<h2>Attributs importants</h2>\n<ul>\n  <li><code>border</code> : définit la bordure (en pixels).</li>\n  <li><code>colspan</code> : permet à une cellule d’occuper plusieurs colonnes.</li>\n  <li><code>rowspan</code> : permet à une cellule d’occuper plusieurs lignes.</li>\n</ul>\n\n<h2>Exemple avec colspan et rowspan</h2>\n<pre><code>&lt;table border=\"1\"&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Nom&lt;/th&gt;\n    &lt;th colspan=\"2\"&gt;Contacts&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td rowspan=\"2\"&gt;Alice&lt;/td&gt;\n    &lt;td&gt;Email&lt;/td&gt;\n    &lt;td&gt;alice@example.com&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Téléphone&lt;/td&gt;\n    &lt;td&gt;123-456-7890&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;</code></pre>\n\n<h2>Résumé</h2>\n<ul>\n  <li>Un tableau est construit avec <code>&lt;table&gt;</code>, des lignes <code>&lt;tr&gt;</code>, des en-têtes <code>&lt;th&gt;</code> et des cellules <code>&lt;td&gt;</code>.</li>\n  <li>Les attributs <code>colspan</code> et <code>rowspan</code> permettent de fusionner des cellules.</li>\n  <li>Les tableaux sont utiles pour organiser des données structurées.</li>\n</ul>"
},{
  "title": "Les Formulaires HTML",
  "description": "<h1>Les Formulaires en HTML</h1>\n<p>Les formulaires HTML permettent de recueillir des données auprès des utilisateurs, comme du texte, des choix, des fichiers, etc.</p>\n\n<h2>La balise &lt;form&gt;</h2>\n<p>Le formulaire est créé avec la balise <code>&lt;form&gt;</code>, qui encapsule les différents éléments de saisie. Il possède généralement deux attributs importants :</p>\n<ul>\n  <li><code>action</code> : URL où les données sont envoyées lors de la soumission.</li>\n  <li><code>method</code> : méthode HTTP utilisée (<code>GET</code> ou <code>POST</code>).</li>\n</ul>\n\n<h2>Les éléments de formulaire courants</h2>\n<ul>\n  <li><code>&lt;input&gt;</code> : champ de saisie, avec différents types (texte, mot de passe, case à cocher, bouton radio, fichier, etc.).</li>\n  <li><code>&lt;textarea&gt;</code> : zone de texte multilignes.</li>\n  <li><code>&lt;select&gt;</code> : menu déroulant avec options.</li>\n  <li><code>&lt;button&gt;</code> : bouton action (soumission ou autre).</li>\n  <li><code>&lt;label&gt;</code> : associe un texte descriptif à un élément de formulaire pour l’accessibilité.</li>\n</ul>\n\n<h2>Exemple de formulaire simple</h2>\n<pre><code>&lt;form action=\"/submit\" method=\"POST\"&gt;\n  &lt;label for=\"name\"&gt;Nom :&lt;/label&gt;\n  &lt;input type=\"text\" id=\"name\" name=\"name\" required&gt;\n\n  &lt;label for=\"email\"&gt;Email :&lt;/label&gt;\n  &lt;input type=\"email\" id=\"email\" name=\"email\" required&gt;\n\n  &lt;label&gt;Genre :&lt;/label&gt;\n  &lt;input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\"&gt;\n  &lt;label for=\"male\"&gt;Homme&lt;/label&gt;\n  &lt;input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\"&gt;\n  &lt;label for=\"female\"&gt;Femme&lt;/label&gt;\n\n  &lt;label for=\"message\"&gt;Message :&lt;/label&gt;\n  &lt;textarea id=\"message\" name=\"message\" rows=\"4\" cols=\"50\"&gt;&lt;/textarea&gt;\n\n  &lt;button type=\"submit\"&gt;Envoyer&lt;/button&gt;\n&lt;/form&gt;</code></pre>\n\n<h2>Attributs importants</h2>\n<ul>\n  <li><code>required</code> : champ obligatoire.</li>\n  <li><code>placeholder</code> : texte indicatif dans un champ vide.</li>\n  <li><code>name</code> : nom de la donnée envoyée.</li>\n  <li><code>value</code> : valeur initiale ou pour les options.</li>\n</ul>\n\n<h2>Résumé</h2>\n<ul>\n  <li>Les formulaires permettent d’interagir avec les utilisateurs.</li>\n  <li>Utilisez différents types d’éléments selon le type de donnée à saisir.</li>\n  <li>Les attributs améliorent la validation et l’ergonomie.</li>\n</ul>"
},{
  "title": "Les Images en HTML",
  "description": "<h1>Les Images en HTML</h1>\n<p>Les images permettent d’enrichir visuellement une page web. La balise utilisée est <code>&lt;img&gt;</code>.</p>\n\n<h2>La balise &lt;img&gt;</h2>\n<p>Elle est auto-fermante et doit comporter au moins l’attribut <code>src</code>, qui donne le chemin de l’image à afficher.</p>\n\n<h2>Attributs essentiels</h2>\n<ul>\n  <li><code>src</code> : chemin vers le fichier image (URL ou chemin relatif).</li>\n  <li><code>alt</code> : texte alternatif affiché si l’image ne peut pas être chargée, important pour l’accessibilité.</li>\n  <li><code>width</code> et <code>height</code> : dimensions de l’image en pixels.</li>\n</ul>\n\n<h2>Exemple simple</h2>\n<pre><code>&lt;img src=\"image.jpg\" alt=\"Description de l’image\" width=\"300\" height=\"200\"&gt;</code></pre>\n\n<h2>Formats d’image courants</h2>\n<ul>\n  <li><code>.jpg</code> ou <code>.jpeg</code> : bon pour les photos, compressé avec perte.</li>\n  <li><code>.png</code> : supporte la transparence, bonne qualité.</li>\n  <li><code>.gif</code> : supporte l’animation, limité à 256 couleurs.</li>\n  <li><code>.svg</code> : images vectorielles, adaptatives.</li>\n</ul>\n\n<h2>Images responsives</h2>\n<p>Pour que l’image s’adapte aux différentes tailles d’écran, on utilise souvent du CSS avec des valeurs en pourcentage ou max-width :</p>\n<pre><code>img {\n  max-width: 100%;\n  height: auto;\n}</code></pre>\n\n<h2>Résumé</h2>\n<ul>\n  <li>La balise <code>&lt;img&gt;</code> insère une image dans la page.</li>\n  <li>L’attribut <code>alt</code> est indispensable pour l’accessibilité et le SEO.</li>\n  <li>Utiliser des formats adaptés selon le besoin.</li>\n</ul>"
},{
  "title": "Les Tables en HTML",
  "description": "<h1>Les Tables en HTML</h1>\n<p>Les tables permettent d’organiser les données en lignes et colonnes dans une page web.</p>\n\n<h2>Les éléments principaux d’une table</h2>\n<ul>\n  <li><code>&lt;table&gt;</code> : conteneur de la table.</li>\n  <li><code>&lt;tr&gt;</code> (table row) : une ligne de la table.</li>\n  <li><code>&lt;th&gt;</code> (table header) : une cellule d’en-tête, souvent en gras.</li>\n  <li><code>&lt;td&gt;</code> (table data) : une cellule de données.</li>\n</ul>\n\n<h2>Exemple simple</h2>\n<pre><code>&lt;table border=\"1\"&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Nom&lt;/th&gt;\n    &lt;th&gt;Âge&lt;/th&gt;\n    &lt;th&gt;Ville&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Alice&lt;/td&gt;\n    &lt;td&gt;24&lt;/td&gt;\n    &lt;td&gt;Paris&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Bob&lt;/td&gt;\n    &lt;td&gt;30&lt;/td&gt;\n    &lt;td&gt;Lyon&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;</code></pre>\n\n<h2>Attributs utiles</h2>\n<ul>\n  <li><code>border</code> : définit la largeur de la bordure.</li>\n  <li><code>colspan</code> : nombre de colonnes qu’une cellule doit couvrir.</li>\n  <li><code>rowspan</code> : nombre de lignes qu’une cellule doit couvrir.</li>\n</ul>\n\n<h2>Structuration avancée</h2>\n<ul>\n  <li><code>&lt;thead&gt;</code> : section d’en-tête.</li>\n  <li><code>&lt;tbody&gt;</code> : section principale des données.</li>\n  <li><code>&lt;tfoot&gt;</code> : section de pied de table.</li>\n</ul>\n\n<h2>Résumé</h2>\n<ul>\n  <li>Les tables structurent les données tabulaires.</li>\n  <li>Utilisez les balises sémantiques pour améliorer l’accessibilité.</li>\n  <li>Les attributs <code>colspan</code> et <code>rowspan</code> permettent de fusionner les cellules.</li>\n</ul>"
},{
  "title": "Les Commentaires HTML",
  "description": "<h1>Les Commentaires en HTML</h1>\n\n<p>Les commentaires HTML sont des notes que vous pouvez insérer dans le code HTML pour expliquer ou annoter des sections. Ils ne sont pas affichés dans le navigateur, mais sont utiles pour documenter votre code.</p>\n\n<h2>Syntaxe des commentaires HTML</h2>\n<p>Un commentaire HTML commence par <code>&lt;!--</code> et se termine par <code>--&gt;</code>.</p>\n\n<pre><code>&lt;!-- Ceci est un commentaire HTML --&gt;</code></pre>\n\n<h2>Utilisation des commentaires</h2>\n<ul>\n<li>Les commentaires peuvent contenir du texte, des notes, ou même du code HTML que vous ne souhaitez pas exécuter temporairement.</li>\n<li>Ils permettent de rendre votre code plus lisible, notamment dans des projets collaboratifs ou complexes.</li>\n<li>Ils ne doivent pas être imbriqués, c’est-à-dire qu’un commentaire ne peut pas contenir un autre commentaire.</li>\n</ul>\n\n<h2>Exemple d'utilisation</h2>\n<pre><code>&lt;!--\nCette section contient l'entête du site\n--&gt;\n&lt;header&gt;\n  &lt;h1&gt;Bienvenue sur mon site&lt;/h1&gt;\n&lt;/header&gt;</code></pre>\n\n<h2>Attention</h2>\n<p>Même si les commentaires ne s'affichent pas dans le navigateur, ils restent visibles dans le code source de la page. Il ne faut donc pas y mettre d'informations sensibles.</p>"
},{
  "title": "Les Entités HTML",
  "description": "<h1>Les Entités HTML</h1>\n\n<p>Les entités HTML sont utilisées pour afficher des caractères spéciaux dans une page Web qui autrement seraient interprétés comme du code HTML.</p>\n\n<h2>Pourquoi utiliser des entités HTML ?</h2>\n<p>Certains caractères ont une signification particulière en HTML, par exemple : <code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>. Pour afficher ces caractères tels quels, on utilise des entités HTML.</p>\n\n<h2>Syntaxe</h2>\n<p>Une entité HTML commence toujours par <code>&amp;</code> et se termine par <code>;</code>.</p>\n\n<h2>Exemples courants</h2>\n<ul>\n<li><code>&amp;lt;</code> pour afficher <code>&lt;</code> (symbole inférieur)</li>\n<li><code>&amp;gt;</code> pour afficher <code>&gt;</code> (symbole supérieur)</li>\n<li><code>&amp;amp;</code> pour afficher <code>&amp;</code> (esperluette)</li>\n<li><code>&amp;quot;</code> pour afficher <code>\"</code> (guillemet double)</li>\n<li><code>&amp;nbsp;</code> pour un espace insécable</li>\n</ul>\n\n<h2>Entités numériques</h2>\n<p>On peut aussi utiliser des codes numériques décimaux ou hexadécimaux :</p>\n<ul>\n<li><code>&amp;#169;</code> ou <code>&amp;#xA9;</code> pour afficher ©</li>\n<li><code>&amp;#174;</code> ou <code>&amp;#xAE;</code> pour afficher ®</li>\n</ul>\n\n<h2>Utilisation</h2>\n<p>Les entités sont particulièrement utiles dans les contenus dynamiques, les scripts ou pour afficher du code source dans une page Web.</p>\n\n<h2>Exemple</h2>\n<pre><code>&lt;p&gt;Les symboles &amp;lt; et &amp;gt; représentent les balises HTML.&lt;/p&gt;</code></pre>"
},{
  "title": "Les Styles CSS en HTML",
  "description": "<h1>Les Styles CSS en HTML</h1>\n\n<p>Le CSS (Cascading Style Sheets) est utilisé pour définir le style et la mise en forme des documents HTML.</p>\n\n<h2>Les trois façons d'appliquer le CSS à une page HTML :</h2>\n\n<ol>\n<li><strong>Styles en ligne (inline)</strong> : appliquer directement à un élément via l'attribut <code>style</code>.\n<pre><code>&lt;p style=\"color: blue; font-size: 14px;\"&gt;Texte en bleu&lt;/p&gt;</code></pre>\n</li>\n<li><strong>Styles internes (embedded)</strong> : définis dans une balise <code>&lt;style&gt;</code> dans la section <code>&lt;head&gt;</code>.\n<pre><code>&lt;style&gt;\np {\n  color: red;\n  font-size: 16px;\n}\n&lt;/style&gt;</code></pre>\n</li>\n<li><strong>Styles externes</strong> : fichier CSS séparé lié à la page HTML via la balise <code>&lt;link&gt;</code>.\n<pre><code>&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;</code></pre>\n</li>\n</ol>\n\n<h2>Exemple simple</h2>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n    body {\n      background-color: lightyellow;\n    }\n    h1 {\n      color: navy;\n      font-family: Arial, sans-serif;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Bienvenue sur ma page&lt;/h1&gt;\n  &lt;p&gt;Voici un paragraphe stylé.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h2>Propriétés CSS courantes</h2>\n<ul>\n<li><code>color</code> : couleur du texte.</li>\n<li><code>background-color</code> : couleur de fond.</li>\n<li><code>font-size</code> : taille de la police.</li>\n<li><code>font-family</code> : famille de police.</li>\n<li><code>margin</code> et <code>padding</code> : marges et espacements.</li>\n<li><code>border</code> : bordure autour des éléments.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>Le CSS permet de séparer la structure HTML de la présentation visuelle, ce qui rend la maintenance plus facile et améliore l'expérience utilisateur.</p>"
},{
  "title": "Les Scripts JavaScript en HTML",
  "description": "<h1>Les Scripts JavaScript en HTML</h1>\n\n<p>JavaScript est un langage de programmation qui permet de rendre une page web interactive. Il est souvent intégré dans les pages HTML via des balises <code>&lt;script&gt;</code>.</p>\n\n<h2>Insertion de JavaScript dans HTML</h2>\n<p>Il existe deux façons principales d'inclure du JavaScript :</p>\n\n<ul>\n<li><strong>Script interne :</strong> Le code JavaScript est écrit directement dans la page HTML, à l'intérieur de la balise <code>&lt;script&gt;</code>.</li>\n<li><strong>Script externe :</strong> Le code JavaScript est placé dans un fichier séparé (fichier .js) et inclus dans la page via l'attribut <code>src</code> de la balise <code>&lt;script&gt;</code>.</li>\n</ul>\n\n<h2>Exemple de script interne</h2>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Exemple JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Bonjour le monde!&lt;/h1&gt;\n\n  &lt;script&gt;\n    alert('Bienvenue sur la page!');\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h2>Exemple de script externe</h2>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Exemple JavaScript Externe&lt;/title&gt;\n  &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Bonjour le monde!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Et le fichier <code>script.js</code> pourrait contenir :</p>\n<pre><code>alert('Bienvenue sur la page!');</code></pre>\n\n<h2>Placement de la balise <code>&lt;script&gt;</code></h2>\n<p>On peut placer la balise <code>&lt;script&gt;</code> dans la section <code>&lt;head&gt;</code> ou juste avant la fermeture de la balise <code>&lt;/body&gt;</code>. Placer le script à la fin du <code>body</code> permet de s'assurer que la page est chargée avant l'exécution du script.</p>\n\n<h2>Attributs importants</h2>\n<ul>\n<li><code>async</code> : permet au script de se charger de façon asynchrone.</li>\n<li><code>defer</code> : retarde l'exécution du script jusqu'à la fin du chargement de la page.</li>\n</ul>\n\n<h2>Manipulation du DOM</h2>\n<p>JavaScript permet de manipuler le DOM (Document Object Model) pour modifier dynamiquement la structure, le style et le contenu de la page.</p>\n\n<h2>Conclusion</h2>\n<p>Les scripts JavaScript sont essentiels pour rendre les pages web dynamiques et interactives, améliorant ainsi l'expérience utilisateur.</p>"
},{
  "title": "Les Métadonnées HTML",
  "description": "<h1>Les Métadonnées HTML</h1>\n\n<p>Les métadonnées fournissent des informations sur la page HTML, mais elles ne sont pas affichées directement dans le contenu de la page.</p>\n\n<h2>La balise <code>&lt;head&gt;</code></h2>\n<p>Les métadonnées sont placées dans la section <code>&lt;head&gt;</code> d'un document HTML.</p>\n\n<h2>Principales balises de métadonnées</h2>\n<ul>\n<li><code>&lt;title&gt;</code> : définit le titre de la page affiché dans l’onglet du navigateur.</li>\n<li><code>&lt;meta&gt;</code> : définit des métadonnées comme le jeu de caractères, la description, les mots-clés, l’auteur, la vue pour mobile, etc.</li>\n<li><code>&lt;link&gt;</code> : relie la page à des ressources externes comme des feuilles de style CSS.</li>\n<li><code>&lt;style&gt;</code> : pour insérer des styles CSS directement dans le <code>head</code>.</li>\n<li><code>&lt;script&gt;</code> : pour insérer des scripts JavaScript dans le <code>head</code>.</li>\n</ul>\n\n<h2>Exemples de balises <code>&lt;meta&gt;</code> courantes</h2>\n<pre><code>&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"description\" content=\"Description de la page web ici\"&gt;\n&lt;meta name=\"keywords\" content=\"HTML, CSS, JavaScript\"&gt;\n&lt;meta name=\"author\" content=\"Nom de l'auteur\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;</code></pre>\n\n<h2>Le rôle de la balise <code>&lt;meta charset&gt;</code></h2>\n<p>Elle définit le jeu de caractères utilisé par la page. <code>UTF-8</code> est le plus courant et supporte tous les caractères internationaux.</p>\n\n<h2>Le rôle de la balise <code>&lt;meta name=\"viewport\"&gt;</code></h2>\n<p>Elle permet de rendre les pages web responsives en contrôlant la largeur et l’échelle de la page sur les appareils mobiles.</p>\n\n<h2>Importance pour le référencement (SEO)</h2>\n<p>Les métadonnées comme la description et les mots-clés aident les moteurs de recherche à comprendre le contenu de la page, améliorant ainsi son référencement.</p>\n\n<h2>Exemple complet d’en-tête HTML</h2>\n<pre><code>&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;meta name=\"description\" content=\"Page d'exemple pour comprendre les métadonnées HTML.\"&gt;\n  &lt;meta name=\"keywords\" content=\"HTML, métadonnées, SEO\"&gt;\n  &lt;meta name=\"author\" content=\"Jean Dupont\"&gt;\n  &lt;title&gt;Exemple Métadonnées&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n&lt;/head&gt;</code></pre>\n\n<h2>Conclusion</h2>\n<p>Les métadonnées sont essentielles pour décrire la page aux navigateurs et aux moteurs de recherche, tout en contrôlant certains aspects du rendu et du comportement de la page.</p>"
},{
  "title": "Les Iframes",
  "description": "<h1>Les Iframes</h1>\n\n<p>Une <strong>iframe</strong> (inline frame) est un élément HTML qui permet d'intégrer un autre document HTML à l'intérieur de la page courante.</p>\n\n<h2>Syntaxe de base</h2>\n<pre><code>&lt;iframe src=\"https://www.example.com\" width=\"600\" height=\"400\"&gt;&lt;/iframe&gt;</code></pre>\n\n<p>Les attributs principaux sont :</p>\n<ul>\n<li><code>src</code> : l'URL de la page à intégrer.</li>\n<li><code>width</code> et <code>height</code> : dimensions de l'iframe.</li>\n<li><code>title</code> : description pour l'accessibilité.</li>\n</ul>\n\n<h2>Utilisations courantes</h2>\n<ul>\n<li>Afficher une page externe (ex : une vidéo YouTube, une carte Google Maps).</li>\n<li>Inclure du contenu tiers sans affecter la page principale.</li>\n<li>Isoler un document avec son propre contexte d'exécution.</li>\n</ul>\n\n<h2>Propriétés et attributs avancés</h2>\n<ul>\n<li><code>sandbox</code> : restreint les actions permises dans l’iframe (ex : empêcher les scripts, les formulaires, etc.).</li>\n<li><code>allowfullscreen</code> : permet la mise en plein écran.</li>\n<li><code>loading=\"lazy\"</code> : charge l’iframe paresseusement pour améliorer la performance.</li>\n</ul>\n\n<h2>Exemple avec sandbox</h2>\n<pre><code>&lt;iframe src=\"https://www.example.com\" width=\"600\" height=\"400\" sandbox=\"allow-scripts allow-same-origin\"&gt;&lt;/iframe&gt;</code></pre>\n\n<h2>Considérations de sécurité</h2>\n<p>Les iframes peuvent introduire des risques de sécurité, notamment les attaques de type <em>clickjacking</em>. L'attribut <code>sandbox</code> aide à limiter ces risques.</p>\n\n<h2>Conclusion</h2>\n<p>Les iframes sont un outil puissant pour intégrer du contenu externe, mais doivent être utilisées avec prudence pour éviter les problèmes de sécurité et de performance.</p>"
},{
  "title": "Les Blocs HTML (div, span)",
  "description": "<h1>Les Blocs HTML : &lt;div&gt; et &lt;span&gt;</h1>\n\n<p>Les éléments <code>&lt;div&gt;</code> et <code>&lt;span&gt;</code> sont deux balises HTML fondamentales utilisées pour structurer et styliser des parties du contenu.</p>\n\n<h2>Élément &lt;div&gt;</h2>\n<p><code>&lt;div&gt;</code> est un conteneur de type bloc (block-level element). Il est utilisé pour regrouper d’autres éléments et structurer la page.</p>\n\n<p>Caractéristiques :</p>\n<ul>\n<li>Occupe toute la largeur disponible.</li>\n<li>Permet d’organiser le contenu en sections.</li>\n<li>Souvent utilisé avec des classes et des IDs pour appliquer du style ou du comportement via CSS et JavaScript.</li>\n</ul>\n\n<h2>Exemple d’utilisation de &lt;div&gt;</h2>\n<pre><code>&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Titre de section&lt;/h2&gt;\n  &lt;p&gt;Paragraphe dans un div.&lt;/p&gt;\n&lt;/div&gt;</code></pre>\n\n<h2>Élément &lt;span&gt;</h2>\n<p><code>&lt;span&gt;</code> est un conteneur en ligne (inline element). Il sert à cibler ou styliser une portion de texte ou un petit groupe d’éléments sans affecter la structure.</p>\n\n<p>Caractéristiques :</p>\n<ul>\n<li>Ne crée pas de saut de ligne.</li>\n<li>Utilisé pour appliquer du style ou ajouter des événements JavaScript sur une partie précise du contenu.</li>\n</ul>\n\n<h2>Exemple d’utilisation de &lt;span&gt;</h2>\n<pre><code>&lt;p&gt;Ceci est un texte avec un &lt;span class=\"highlight\"&gt;morceau en surbrillance&lt;/span&gt;.&lt;/p&gt;</code></pre>\n\n<h2>Différences entre &lt;div&gt; et &lt;span&gt;</h2>\n<table border=\"1\" cellpadding=\"5\">\n  <tr><th>Caractéristique</th><th>&lt;div&gt;</th><th>&lt;span&gt;</th></tr>\n  <tr><td>Type</td><td>Bloc (block-level)</td><td>En ligne (inline)</td></tr>\n  <tr><td>Utilisation</td><td>Structurer des sections</td><td>Styler des parties de texte</td></tr>\n  <tr><td>Effet sur mise en page</td><td>Crée un saut de ligne</td><td>Ne crée pas de saut de ligne</td></tr>\n</table>\n\n<h2>Conclusion</h2>\n<p><code>&lt;div&gt;</code> et <code>&lt;span&gt;</code> sont des éléments neutres qui n’apportent aucun style par défaut mais sont essentiels pour organiser et styliser le contenu HTML grâce au CSS et au JavaScript.</p>"
},{
  "title": "Les Sections HTML5 (header, footer, article, section...)",
  "description": "<h1>Les Sections HTML5</h1>\n\n<p>HTML5 introduit plusieurs éléments sémantiques pour mieux structurer le contenu d'une page web, facilitant ainsi la compréhension du document par les navigateurs et les moteurs de recherche.</p>\n\n<h2>Éléments principaux</h2>\n<ul>\n<li><code>&lt;header&gt;</code> : Définit l'en-tête d'une page ou d'une section, contenant souvent le logo, le titre, ou la navigation principale.</li>\n<li><code>&lt;footer&gt;</code> : Définit le pied de page d'une page ou d'une section, incluant souvent les informations de copyright, liens sociaux, ou informations de contact.</li>\n<li><code>&lt;article&gt;</code> : Représente un contenu autonome, comme un article de blog, une news ou une publication.</li>\n<li><code>&lt;section&gt;</code> : Regroupe une section thématique du contenu, pouvant contenir un ou plusieurs articles ou d'autres sections.</li>\n<li><code>&lt;nav&gt;</code> : Contient des liens de navigation principaux.</li>\n<li><code>&lt;aside&gt;</code> : Contenu en marge, comme une barre latérale ou des encarts.</li>\n</ul>\n\n<h2>Exemple d'utilisation</h2>\n<pre><code>&lt;header&gt;\n  &lt;h1&gt;Mon Site Web&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;ul&gt;\n      &lt;li&gt;&lt;a href=\"#\"&gt;Accueil&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"#\"&gt;À propos&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"#\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/nav&gt;\n&lt;/header&gt;\n\n&lt;section&gt;\n  &lt;article&gt;\n    &lt;h2&gt;Titre de l'article&lt;/h2&gt;\n    &lt;p&gt;Contenu de l'article.&lt;/p&gt;\n  &lt;/article&gt;\n&lt;/section&gt;\n\n&lt;aside&gt;\n  &lt;p&gt;Contenu en marge, comme une publicité ou un lien externe.&lt;/p&gt;\n&lt;/aside&gt;\n\n&lt;footer&gt;\n  &lt;p&gt;&copy; 2025 Mon Site Web&lt;/p&gt;\n&lt;/footer&gt;</code></pre>\n\n<h2>Avantages des sections HTML5</h2>\n<ul>\n<li>Améliore la lisibilité du code source.</li>\n<li>Facilite le référencement SEO en aidant les moteurs à comprendre la structure.</li>\n<li>Favorise l'accessibilité en permettant aux lecteurs d'écran de mieux naviguer.</li>\n<li>Permet un style CSS plus ciblé grâce aux éléments spécifiques.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>Les sections HTML5 apportent une structure claire et sémantique aux pages web, remplaçant l’utilisation excessive de <code>&lt;div&gt;</code> génériques et améliorant la compréhension globale du contenu.</p>"
},{
  "title": "Les Formulaires avancés (input types, validation, etc.)",
  "description": "<h1>Les Formulaires avancés en HTML5</h1>\n\n<p>HTML5 a enrichi les formulaires avec de nouveaux types d'entrées, attributs et mécanismes de validation intégrés, facilitant la création de formulaires plus interactifs et robustes sans JavaScript.</p>\n\n<h2>Nouveaux types d'input</h2>\n<ul>\n<li><code>email</code> : champ pour saisir une adresse email, avec validation automatique du format.</li>\n<li><code>url</code> : champ pour saisir une URL, avec validation du format.</li>\n<li><code>tel</code> : champ pour numéro de téléphone.</li>\n<li><code>number</code> : champ pour nombre avec possibilité de définir min, max et step.</li>\n<li><code>range</code> : curseur pour sélectionner une valeur dans une plage.</li>\n<li><code>date</code>, <code>time</code>, <code>datetime-local</code> : champs pour dates et heures avec sélection via un calendrier ou horloge intégrée.</li>\n<li><code>color</code> : sélecteur de couleur.</li>\n</ul>\n\n<h2>Attributs de validation</h2>\n<ul>\n<li><code>required</code> : rend un champ obligatoire.</li>\n<li><code>pattern</code> : expression régulière pour valider le format.</li>\n<li><code>min</code>, <code>max</code> : limites numériques ou de date.</li>\n<li><code>step</code> : incréments autorisés pour les champs numériques.</li>\n<li><code>maxlength</code> : longueur maximale du texte.</li>\n</ul>\n\n<h2>Validation automatique</h2>\n<p>Les navigateurs effectuent une validation automatique avant soumission si ces attributs sont utilisés. En cas d'erreur, un message d'erreur standard est affiché.</p>\n\n<h2>Exemple de formulaire avancé</h2>\n<pre><code>&lt;form&gt;\n  &lt;label for=\"email\"&gt;Email :&lt;/label&gt;\n  &lt;input type=\"email\" id=\"email\" name=\"email\" required&gt;\n\n  &lt;label for=\"birthdate\"&gt;Date de naissance :&lt;/label&gt;\n  &lt;input type=\"date\" id=\"birthdate\" name=\"birthdate\" min=\"1900-01-01\" max=\"2025-12-31\" required&gt;\n\n  &lt;label for=\"quantity\"&gt;Quantité (1-10) :&lt;/label&gt;\n  &lt;input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"10\" step=\"1\" required&gt;\n\n  &lt;label for=\"color\"&gt;Couleur préférée :&lt;/label&gt;\n  &lt;input type=\"color\" id=\"color\" name=\"color\"&gt;\n\n  &lt;input type=\"submit\" value=\"Envoyer\"&gt;\n&lt;/form&gt;</code></pre>\n\n<h2>Personnalisation des messages d’erreur</h2>\n<p>Avec JavaScript, il est possible de personnaliser les messages d’erreur en interceptant l’événement de validation.</p>\n\n<h2>Conclusion</h2>\n<p>Les formulaires avancés en HTML5 simplifient la collecte de données fiables tout en améliorant l’expérience utilisateur grâce à la validation native et aux nouveaux types d’entrées adaptés à chaque besoin.</p>"
},{
  "title": "Les Attributs Globaux HTML",
  "description": "<h1>Les Attributs Globaux en HTML</h1>\n\n<p>Les attributs globaux sont des attributs qui peuvent être utilisés sur presque tous les éléments HTML pour contrôler leur comportement, apparence ou accessibilité.</p>\n\n<h2>Attributs globaux communs</h2>\n<ul>\n<li><code>id</code> : Identifie un élément de manière unique dans la page.</li>\n<li><code>class</code> : Permet de classer un élément dans une ou plusieurs catégories, souvent utilisé pour le style CSS.</li>\n<li><code>style</code> : Applique des styles CSS directement à l’élément.</li>\n<li><code>title</code> : Fournit un texte d’information qui s’affiche au survol de l’élément.</li>\n<li><code>hidden</code> : Cache l’élément (pas visible et non pris en compte pour la mise en page).</li>\n<li><code>tabindex</code> : Contrôle l’ordre de navigation au clavier.</li>\n<li><code>contenteditable</code> : Rend le contenu modifiable par l’utilisateur.</li>\n<li><code>data-*</code> : Attributs personnalisés pour stocker des données privées liées à un élément (ex : <code>data-user-id</code>).</li>\n</ul>\n\n<h2>Exemples</h2>\n<pre><code>&lt;div id=\"section1\" class=\"important\" style=\"color: red;\" title=\"Important section\"&gt;\n  Contenu important.\n&lt;/div&gt;\n\n&lt;p hidden&gt;Ce paragraphe est caché.&lt;/p&gt;\n\n&lt;button tabindex=\"0\"&gt;Bouton accessible&lt;/button&gt;\n\n&lt;span contenteditable=\"true\"&gt;Texte modifiable par l'utilisateur&lt;/span&gt;\n\n&lt;div data-user-id=\"12345\"&gt;Données personnalisées&lt;/div&gt;</code></pre>\n\n<h2>Avantages</h2>\n<ul>\n<li>Uniformité : disponibles sur la plupart des éléments HTML.</li>\n<li>Facilité d’accès : permettent une meilleure interaction avec JavaScript et CSS.</li>\n<li>Flexibilité : les attributs <code>data-*</code> permettent d’ajouter des données personnalisées sans polluer le DOM.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>Les attributs globaux sont essentiels pour enrichir les éléments HTML, permettant d’améliorer la présentation, l’accessibilité, et la manipulation dynamique du contenu web.</p>"
},{
  "title": "Les Éléments Obsolètes",
  "description": "<h1>Les Éléments Obsolètes en HTML</h1>\n\n<p>Avec l'évolution des standards web, certains éléments HTML sont devenus obsolètes car ils sont remplacés par des méthodes plus modernes et sémantiques ou parce qu'ils n'ont plus leur place dans le web actuel.</p>\n\n<h2>Pourquoi les éléments deviennent-ils obsolètes ?</h2>\n<ul>\n<li>Amélioration de la sémantique HTML pour mieux structurer le contenu.</li>\n<li>Adoption des feuilles de style CSS pour la présentation plutôt que des balises HTML.</li>\n<li>Amélioration de l’accessibilité et de la compatibilité entre navigateurs.</li>\n</ul>\n\n<h2>Quelques éléments obsolètes courants</h2>\n<ul>\n<li><code>&lt;font&gt;</code> : utilisé pour définir la police, taille, et couleur du texte. Remplacé par CSS.</li>\n<li><code>&lt;center&gt;</code> : pour centrer le contenu. Remplacé par CSS (<code>text-align</code>).</li>\n<li><code>&lt;big&gt;</code>, <code>&lt;strike&gt;</code>, <code>&lt;u&gt;</code> : utilisés pour style du texte, remplacés par CSS.</li>\n<li><code>&lt;frame&gt;</code> et <code>&lt;frameset&gt;</code> : pour créer des cadres, remplacés par CSS et balises modernes comme <code>&lt;iframe&gt;</code>.</li>\n<li><code>&lt;applet&gt;</code> : pour intégrer des applets Java, remplacé par des technologies plus modernes.</li>\n</ul>\n\n<h2>Que faire en cas d’éléments obsolètes ?</h2>\n<p>Il est recommandé de ne plus utiliser ces éléments et de privilégier les solutions modernes basées sur le HTML5 et CSS pour garantir la compatibilité et la maintenabilité du code.</p>\n\n<h2>Conclusion</h2>\n<p>La connaissance des éléments obsolètes permet de comprendre l’évolution du web et d’écrire un code propre, moderne et compatible avec tous les navigateurs actuels.</p>"
}

]
  },
  {
    "name": "CSS",
    "description": "CSS (Cascading Style Sheets) est le langage utilisé pour décrire la présentation des documents HTML. Il permet de définir les couleurs, polices, marges, dispositions, animations, et rendre les pages web visuellement attrayantes.",
    "articles": [
      {
  "title": "Introduction au CSS",
  "description": "<h1>CSS - Cascading Style Sheets</h1>\n\n<p>CSS signifie <strong>Cascading Style Sheets</strong>, ou feuilles de style en cascade en français.</p>\n\n<h2>Qu'est-ce que le CSS ?</h2>\n<p>Le CSS est un langage utilisé pour décrire la présentation d'un document HTML. Il contrôle la façon dont les éléments HTML sont affichés à l'écran, sur papier ou dans d'autres médias.</p>\n\n<h2>Pourquoi utiliser le CSS ?</h2>\n<ul>\n<li><strong>Séparation du contenu et de la présentation :</strong> Le HTML contient le contenu, le CSS définit son apparence.</li>\n<li><strong>Facilité de maintenance :</strong> Les styles peuvent être changés en un seul endroit (fichier CSS) pour affecter plusieurs pages.</li>\n<li><strong>Meilleure accessibilité :</strong> Le CSS permet de créer des pages web accessibles à tous les types d'appareils.</li>\n<li><strong>Flexibilité :</strong> Le CSS permet des mises en page sophistiquées et des effets visuels avancés.</li>\n</ul>\n\n<h2>Comment fonctionne le CSS ?</h2>\n<p>Le CSS s'écrit sous forme de règles qui indiquent quels éléments HTML doivent être stylés et comment.</p>\n<pre><code>sélecteur {\n  propriété: valeur;\n}</code></pre>\n\n<p>Exemple :</p>\n<pre><code>p {\n  color: blue;\n  font-size: 16px;\n}</code></pre>\n\n<p>Ce code signifie : tous les paragraphes (<code>&lt;p&gt;</code>) doivent être affichés en bleu avec une taille de police de 16 pixels.</p>\n\n<h2>Intégrer le CSS dans une page HTML</h2>\n<p>Il y a trois façons principales d'ajouter du CSS à une page HTML :</p>\n<ol>\n<li><strong>Styles en ligne :</strong> directement dans les balises HTML avec l'attribut <code>style</code>.</li>\n<li><strong>Styles internes :</strong> dans une balise <code>&lt;style&gt;</code> dans la section <code>&lt;head&gt;</code> du document HTML.</li>\n<li><strong>Feuilles de style externes :</strong> dans un fichier .css séparé, lié avec une balise <code>&lt;link&gt;</code>.</li>\n</ol>\n\n<h3>Exemple de style en ligne :</h3>\n<pre><code>&lt;p style=\"color:red;\"&gt;Texte rouge&lt;/p&gt;</code></pre>\n\n<h3>Exemple de styles internes :</h3>\n<pre><code>&lt;head&gt;\n  &lt;style&gt;\n    p { color: red; }\n  &lt;/style&gt;\n&lt;/head&gt;</code></pre>\n\n<h3>Exemple de feuille de style externe :</h3>\n<pre><code>&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n&lt;/head&gt;</code></pre>\n\n<h2>Conclusion</h2>\n<p>Le CSS est un langage essentiel pour le développement web moderne, permettant de séparer clairement la structure (HTML) de la présentation (CSS) et d'améliorer considérablement l'apparence des pages web.</p>"
},{
  "title": "Syntaxe CSS",
  "description": "<h1>Syntaxe CSS</h1>\n\n<p>La syntaxe CSS est simple et comprend des règles qui indiquent aux navigateurs comment styliser les éléments HTML.</p>\n\n<h2>Structure d'une règle CSS</h2>\n<p>Une règle CSS est composée de deux parties principales :</p>\n<ul>\n<li><strong>Le sélecteur :</strong> Il cible l'élément HTML que l'on souhaite styliser.</li>\n<li><strong>La déclaration :</strong> Elle contient une ou plusieurs propriétés CSS avec leurs valeurs, entre accolades.</li>\n</ul>\n\n<pre><code>sélecteur {\n  propriété: valeur;\n  propriété: valeur;\n}</code></pre>\n\n<h2>Exemple simple</h2>\n<pre><code>p {\n  color: blue;\n  font-size: 16px;\n}</code></pre>\n<p>Cette règle applique la couleur bleue et une taille de police de 16 pixels à tous les paragraphes (&lt;p&gt;).</p>\n\n<h2>Les sélecteurs CSS</h2>\n<p>Les sélecteurs peuvent être :</p>\n<ul>\n<li>Des noms de balises (ex : <code>p</code>, <code>h1</code>, <code>div</code>)</li>\n<li>Des classes (ex : <code>.classe</code>)</li>\n<li>Des identifiants (ex : <code>#id</code>)</li>\n<li>Des sélecteurs d'attributs, pseudo-classes, pseudo-éléments, etc.</li>\n</ul>\n\n<h2>Les déclarations</h2>\n<p>Chaque déclaration contient une propriété et une valeur séparées par un deux-points, et se termine par un point-virgule.</p>\n\n<p><strong>Exemple :</strong> <code>color: red;</code> change la couleur du texte en rouge.</p>\n\n<h2>Commentaires en CSS</h2>\n<p>Les commentaires sont encadrés par <code>/* */</code> et ne sont pas pris en compte par le navigateur.</p>\n<pre><code>/* Ceci est un commentaire */</code></pre>\n\n<h2>Bonnes pratiques</h2>\n<ul>\n<li>Utiliser des noms de classes clairs et significatifs.</li>\n<li>Organiser les règles CSS pour faciliter la maintenance.</li>\n<li>Éviter les doublons et conflits entre sélecteurs.</li>\n<li>Utiliser l'indentation pour améliorer la lisibilité.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>La compréhension de la syntaxe CSS est essentielle pour écrire des styles efficaces et maintenables.</p>"
},{
  "title": "Sélecteurs CSS",
  "description": "<h1>Sélecteurs CSS</h1>\n\n<p>Les sélecteurs CSS permettent de cibler les éléments HTML auxquels vous souhaitez appliquer des styles.</p>\n\n<h2>Types de sélecteurs</h2>\n<ul>\n<li><strong>Sélecteurs par type :</strong> ciblent les balises HTML, ex : <code>p</code>, <code>h1</code></li>\n<li><strong>Sélecteurs de classe :</strong> ciblent les éléments avec une classe spécifique, ex : <code>.menu</code></li>\n<li><strong>Sélecteurs d'identifiant :</strong> ciblent un élément unique par son id, ex : <code>#header</code></li>\n<li><strong>Sélecteurs universels :</strong> ciblent tous les éléments, ex : <code>*</code></li>\n<li><strong>Sélecteurs d'attribut :</strong> ciblent les éléments selon leurs attributs, ex : <code>a[href]</code></li>\n<li><strong>Sélecteurs de groupe :</strong> permettent de sélectionner plusieurs éléments en même temps, ex : <code>h1, h2, h3</code></li>\n<li><strong>Sélecteurs de descendant :</strong> ciblent les éléments descendants d’un autre élément, ex : <code>div p</code></li>\n<li><strong>Pseudo-classes :</strong> ciblent un état spécifique d’un élément, ex : <code>a:hover</code></li>\n<li><strong>Pseudo-éléments :</strong> ciblent une partie d’un élément, ex : <code>p::first-letter</code></li>\n</ul>\n\n<h2>Exemples</h2>\n<pre><code>/* Tous les paragraphes */\np {\n  color: blue;\n}\n\n/* Tous les éléments avec la classe 'menu' */\n.menu {\n  background-color: #eee;\n}\n\n/* L'élément avec l'id 'header' */\n#header {\n  font-size: 2em;\n}\n\n/* Tous les liens au survol */\na:hover {\n  color: red;\n}</code></pre>\n\n<h2>Spécificité des sélecteurs</h2>\n<p>Lorsque plusieurs règles CSS ciblent le même élément, celle avec la plus haute spécificité est appliquée.</p>\n\n<h2>Conclusion</h2>\n<p>Les sélecteurs sont la base du ciblage des éléments HTML en CSS, et bien les comprendre permet d’écrire des styles efficaces et précis.</p>"
},{
  "title": "Couleurs CSS",
  "description": "<h1>Couleurs CSS</h1>\n\n<p>Les couleurs en CSS sont utilisées pour définir la couleur du texte, des arrière-plans, des bordures, et bien plus.</p>\n\n<h2>Formats de couleur</h2>\n<ul>\n<li><strong>Noms de couleurs :</strong> ex : <code>red</code>, <code>blue</code>, <code>green</code></li>\n<li><strong>Valeurs hexadécimales :</strong> ex : <code>#FF0000</code> (rouge), <code>#0000FF</code> (bleu)</li>\n<li><strong>RGB :</strong> ex : <code>rgb(255, 0, 0)</code> (rouge)</li>\n<li><strong>RGBA :</strong> comme RGB mais avec un canal alpha pour la transparence, ex : <code>rgba(255, 0, 0, 0.5)</code></li>\n<li><strong>HSL :</strong> teinte, saturation, luminosité, ex : <code>hsl(0, 100%, 50%)</code></li>\n<li><strong>HSLA :</strong> comme HSL avec canal alpha, ex : <code>hsla(0, 100%, 50%, 0.5)</code></li>\n</ul>\n\n<h2>Exemples d’utilisation</h2>\n<pre><code>p {\n  color: blue; /* couleur du texte */\n  background-color: #f0f0f0; /* couleur de fond */\n  border: 1px solid rgb(0, 0, 0); /* bordure noire */\n}</code></pre>\n\n<h2>Transparence</h2>\n<p>Les formats RGBA et HSLA permettent de définir la transparence grâce au canal alpha (0 = transparent, 1 = opaque).</p>\n\n<h2>Outils</h2>\n<p>De nombreux outils en ligne permettent de choisir et convertir les couleurs CSS.</p>\n\n<h2>Conclusion</h2>\n<p>Comprendre les différentes façons de définir des couleurs en CSS est essentiel pour créer des designs attractifs et accessibles.</p>"
},{
  "title": "Arrière-plans CSS",
  "description": "<h1>Arrière-plans CSS</h1>\n\n<p>Les propriétés d'arrière-plan CSS permettent de définir l'apparence de l'arrière-plan des éléments HTML.</p>\n\n<h2>Propriétés principales</h2>\n<ul>\n<li><strong>background-color :</strong> définit la couleur de fond, ex : <code>background-color: #ffffff;</code></li>\n<li><strong>background-image :</strong> définit une image de fond, ex : <code>background-image: url('image.jpg');</code></li>\n<li><strong>background-repeat :</strong> contrôle la répétition de l'image de fond, ex : <code>no-repeat</code>, <code>repeat-x</code>, <code>repeat-y</code></li>\n<li><strong>background-position :</strong> positionne l'image de fond, ex : <code>center</code>, <code>top left</code></li>\n<li><strong>background-size :</strong> ajuste la taille de l'image de fond, ex : <code>cover</code>, <code>contain</code></li>\n<li><strong>background-attachment :</strong> fixe l'image lors du défilement, ex : <code>fixed</code>, <code>scroll</code></li>\n</ul>\n\n<h2>Exemple d’utilisation</h2>\n<pre><code>div {\n  background-color: #f0f0f0;\n  background-image: url('background.png');\n  background-repeat: no-repeat;\n  background-position: center center;\n  background-size: cover;\n}</code></pre>\n\n<h2>Couche multiple</h2>\n<p>Il est possible d'utiliser plusieurs images d'arrière-plan en les séparant par des virgules.</p>\n\n<h2>Conclusion</h2>\n<p>La maîtrise des arrière-plans CSS permet de créer des designs visuellement attractifs et dynamiques.</p>"
},{
  "title": "Margin CSS",
  "description": "<h1>Margin CSS</h1>\n\n<p>La propriété <code>margin</code> permet de gérer l'espace extérieur autour d'un élément HTML.</p>\n\n<h2>Propriétés de la marge</h2>\n<ul>\n<li><code>margin-top</code> : espace au-dessus de l’élément</li>\n<li><code>margin-right</code> : espace à droite de l’élément</li>\n<li><code>margin-bottom</code> : espace en dessous de l’élément</li>\n<li><code>margin-left</code> : espace à gauche de l’élément</li>\n<li><code>margin</code> : raccourci pour définir les marges dans l’ordre haut, droite, bas, gauche</li>\n</ul>\n\n<h2>Syntaxe raccourcie</h2>\n<ul>\n<li><code>margin: 10px;</code> — même marge de 10px partout</li>\n<li><code>margin: 10px 20px;</code> — 10px en haut et bas, 20px à droite et gauche</li>\n<li><code>margin: 10px 20px 30px;</code> — 10px en haut, 20px à droite et gauche, 30px en bas</li>\n<li><code>margin: 10px 20px 30px 40px;</code> — 10px haut, 20px droite, 30px bas, 40px gauche</li>\n</ul>\n\n<h2>Valeurs spéciales</h2>\n<ul>\n<li><code>auto</code> : centrer un élément horizontalement (utile pour les éléments block avec largeur définie)</li>\n<li><code>inherit</code> : hérite de la marge du parent</li>\n<li><code>initial</code> : valeur par défaut du navigateur</li>\n</ul>\n\n<h2>Exemple</h2>\n<pre><code>div {\n  margin: 20px;\n}\n\np {\n  margin: 10px 5px 15px 0;\n}\n\n.container {\n  margin: 0 auto; /* centre horizontalement */\n}</code></pre>\n\n<h2>Conclusion</h2>\n<p>Les marges permettent de gérer l’espacement entre les éléments et de structurer la mise en page.</p>"
}
,{
  "title": "Padding CSS",
  "description": "<h1>Padding CSS</h1>\n\n<p>Le padding définit l’espace intérieur entre le contenu d’un élément HTML et sa bordure.</p>\n\n<h2>Propriétés du padding</h2>\n<ul>\n<li><code>padding-top</code> : espace en haut</li>\n<li><code>padding-right</code> : espace à droite</li>\n<li><code>padding-bottom</code> : espace en bas</li>\n<li><code>padding-left</code> : espace à gauche</li>\n<li><code>padding</code> : raccourci pour définir les 4 côtés</li>\n</ul>\n\n<h2>Syntaxe raccourcie</h2>\n<p>La propriété <code>padding</code> peut prendre 1 à 4 valeurs :</p>\n<ul>\n<li>1 valeur : même padding pour tous les côtés</li>\n<li>2 valeurs : première pour haut/bas, seconde pour droite/gauche</li>\n<li>3 valeurs : première pour haut, seconde pour droite/gauche, troisième pour bas</li>\n<li>4 valeurs : haut, droite, bas, gauche</li>\n</ul>\n\n<h2>Exemples</h2>\n<pre><code>div {\n  padding: 20px;\n}\n\nsection {\n  padding: 10px 15px;\n}\n\narticle {\n  padding: 5px 10px 15px;\n}\n\np {\n  padding: 5px 10px 15px 20px;\n}</code></pre>\n\n<h2>Valeurs spéciales</h2>\n<ul>\n<li><code>inherit</code> : hérite du padding du parent</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>Le padding est important pour contrôler l'espacement interne des éléments et améliorer la lisibilité.</p>"
},{
  "title": "Border CSS",
  "description": "<h1>Border CSS</h1>\n\n<p>La propriété <code>border</code> permet de définir la bordure autour d'un élément HTML.</p>\n\n<h2>Propriétés de la bordure</h2>\n<ul>\n<li><code>border-width</code> : épaisseur de la bordure (ex : 1px, 5px)</li>\n<li><code>border-style</code> : style de la bordure (solid, dashed, dotted, double, none...)</li>\n<li><code>border-color</code> : couleur de la bordure (nom, hex, rgb...)</li>\n<li><code>border</code> : raccourci pour définir largeur, style, couleur en une seule déclaration</li>\n</ul>\n\n<h2>Exemples</h2>\n<pre><code>div {\n  border: 2px solid black;\n}\n\np {\n  border-width: 3px;\n  border-style: dashed;\n  border-color: red;\n}\n\nsection {\n  border: 5px dotted blue;\n}</code></pre>\n\n<h2>Bordures individuelles</h2>\n<p>On peut définir des bordures spécifiques sur chaque côté :</p>\n<ul>\n<li><code>border-top</code></li>\n<li><code>border-right</code></li>\n<li><code>border-bottom</code></li>\n<li><code>border-left</code></li>\n</ul>\n\n<h2>Valeurs spéciales</h2>\n<ul>\n<li><code>none</code> : aucune bordure</li>\n<li><code>inherit</code> : hérite de la bordure du parent</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>La propriété <code>border</code> est essentielle pour styliser les éléments avec des contours visibles.</p>"
},{
  "title": "Hauteur et Largeur CSS (Height & Width)",
  "description": "<h1>Hauteur et Largeur CSS (Height & Width)</h1>\n\n<p>Les propriétés <code>height</code> et <code>width</code> permettent de définir la hauteur et la largeur d'un élément HTML.</p>\n\n<h2>Syntaxe</h2>\n<ul>\n<li><code>width: valeur;</code> — définit la largeur</li>\n<li><code>height: valeur;</code> — définit la hauteur</li>\n</ul>\n\n<h2>Valeurs possibles</h2>\n<ul>\n<li><code>auto</code> — taille automatique selon le contenu (valeur par défaut)</li>\n<li><code>px</code> — pixels fixes (ex: <code>100px</code>)</li>\n<li><code>%</code> — pourcentage relatif à l'élément parent (ex: <code>50%</code>)</li>\n<li><code>vh</code>, <code>vw</code> — unités relatives à la taille de la fenêtre (viewport height/width)</li>\n<li><code>max-content</code>, <code>min-content</code> — tailles adaptées au contenu</li>\n<li><code>min-height</code> et <code>max-height</code> pour limiter la hauteur</li>\n<li><code>min-width</code> et <code>max-width</code> pour limiter la largeur</li>\n</ul>\n\n<h2>Exemple</h2>\n<pre><code>div {\n  width: 200px;\n  height: 100px;\n}\n\n.container {\n  width: 50%;\n  height: auto;\n}\n\nheader {\n  max-width: 1200px;\n  min-height: 300px;\n}</code></pre>\n\n<h2>Remarques importantes</h2>\n<ul>\n<li>Si un élément est <code>display: inline;</code>, la propriété <code>height</code> ne s’applique pas.</li>\n<li>Pour que la largeur/hauteur en pourcentage fonctionne, le parent doit avoir une dimension définie.</li>\n<li>Le modèle de boîte (box model) peut affecter la taille finale, notamment le padding et les bordures.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>Les propriétés <code>height</code> et <code>width</code> sont essentielles pour contrôler la taille des éléments dans une page web, permettant une mise en page précise et adaptée.</p>"
},{
  "title": "Texte CSS (Text)",
  "description": "<h1>Texte CSS (Text)</h1>\n\n<p>Les propriétés CSS de texte permettent de contrôler l'apparence du texte dans une page web.</p>\n\n<h2>Principales propriétés de texte</h2>\n<ul>\n<li><code>color</code> — définit la couleur du texte.</li>\n<li><code>text-align</code> — aligne le texte (left, right, center, justify).</li>\n<li><code>text-decoration</code> — ajoute une décoration au texte (underline, line-through, none).</li>\n<li><code>text-transform</code> — modifie la casse du texte (uppercase, lowercase, capitalize).</li>\n<li><code>letter-spacing</code> — espace entre les lettres.</li>\n<li><code>word-spacing</code> — espace entre les mots.</li>\n<li><code>line-height</code> — hauteur de ligne (espace vertical entre lignes).</li>\n<li><code>text-indent</code> — indentation de la première ligne d’un paragraphe.</li>\n<li><code>text-shadow</code> — ajoute une ombre portée au texte.</li>\n</ul>\n\n<h2>Exemples</h2>\n<pre><code>p {\n  color: #333333;\n  text-align: justify;\n  text-decoration: underline;\n  text-transform: capitalize;\n  letter-spacing: 2px;\n  word-spacing: 4px;\n  line-height: 1.5;\n  text-indent: 30px;\n  text-shadow: 1px 1px 2px gray;\n}</code></pre>\n\n<h2>Remarques</h2>\n<ul>\n<li>La propriété <code>text-align: justify;</code> répartit le texte sur toute la largeur du conteneur, en ajustant l'espacement entre les mots.</li>\n<li>Les ombres portées sur le texte permettent d'améliorer la lisibilité ou l'effet visuel.</li>\n<li><code>text-transform</code> ne modifie pas le contenu HTML, seulement l'affichage.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>Les propriétés CSS de texte sont essentielles pour améliorer la lisibilité, le style et l'impact visuel du contenu textuel sur une page web.</p>"
},{
  "title": "Polices CSS (Fonts)",
  "description": "<h1>Polices CSS (Fonts)</h1>\n\n<p>Les propriétés CSS liées aux polices permettent de contrôler la typographie du texte affiché sur une page web.</p>\n\n<h2>Principales propriétés de police</h2>\n<ul>\n<li><code>font-family</code> — spécifie la famille de police à utiliser (ex : Arial, 'Times New Roman', sans-serif).</li>\n<li><code>font-size</code> — définit la taille de la police (ex : px, em, rem, %, vw).</li>\n<li><code>font-weight</code> — définit l'épaisseur du texte (normal, bold, 100 à 900).</li>\n<li><code>font-style</code> — définit le style (normal, italic, oblique).</li>\n<li><code>font-variant</code> — contrôle l'affichage des petites capitales.</li>\n<li><code>line-height</code> — hauteur de ligne (espace vertical entre les lignes de texte).</li>\n<li><code>font-feature-settings</code> — active les fonctionnalités OpenType spécifiques.</li>\n</ul>\n\n<h2>Définir une famille de polices</h2>\n<p>Il est recommandé de définir une liste de polices alternatives, au cas où la première n’est pas disponible :</p>\n<pre><code>font-family: 'Arial', 'Helvetica', sans-serif;</code></pre>\n\n<h2>Exemple complet</h2>\n<pre><code>p {\n  font-family: 'Georgia', serif;\n  font-size: 16px;\n  font-weight: 400;\n  font-style: italic;\n  line-height: 1.6;\n}</code></pre>\n\n<h2>Import de polices externes</h2>\n<p>Les polices peuvent être importées via Google Fonts ou d'autres services :</p>\n<pre><code>@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');\n\nbody {\n  font-family: 'Roboto', sans-serif;\n}</code></pre>\n\n<h2>Remarques</h2>\n<ul>\n<li>La propriété <code>font-size</code> peut utiliser différentes unités selon le contexte pour améliorer la responsivité.</li>\n<li>Le choix des polices impacte la lisibilité et l’aspect esthétique du site.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>Les propriétés CSS liées aux polices sont essentielles pour contrôler l'apparence typographique, ce qui contribue à une meilleure expérience utilisateur.</p>"
},{
  "title": "Listes CSS (Lists)",
  "description": "<h1>Listes CSS (Lists)</h1>\n\n<p>Les listes HTML (ordonnées, non ordonnées, et listes de définitions) peuvent être stylisées avec CSS pour améliorer leur présentation.</p>\n\n<h2>Types de listes</h2>\n<ul>\n<li><code>&lt;ul&gt;</code> : liste non ordonnée (avec des puces).</li>\n<li><code>&lt;ol&gt;</code> : liste ordonnée (avec des numéros ou lettres).</li>\n<li><code>&lt;dl&gt;</code> : liste de définitions (termes et descriptions).</li>\n</ul>\n\n<h2>Propriétés CSS importantes pour les listes</h2>\n<ul>\n<li><code>list-style-type</code> — définit le style des marqueurs (disc, circle, square, decimal, lower-alpha, none, etc.).</li>\n<li><code>list-style-position</code> — définit la position des marqueurs (inside, outside).</li>\n<li><code>list-style-image</code> — utilise une image personnalisée comme marqueur.</li>\n<li><code>padding</code> et <code>margin</code> — contrôlent les espaces autour des listes et des éléments de liste.</li>\n<li><code>counter-reset</code> et <code>counter-increment</code> — permettent de personnaliser la numérotation dans les listes ordonnées.</li>\n</ul>\n\n<h2>Exemples</h2>\n<pre><code>ul {\n  list-style-type: square;\n  margin-left: 20px;\n}\n\nol {\n  list-style-type: upper-roman;\n  padding-left: 30px;\n}\n\nli {\n  margin-bottom: 5px;\n}</code></pre>\n\n<h2>Listes personnalisées</h2>\n<p>Vous pouvez utiliser <code>list-style-image</code> pour remplacer les puces par des images :</p>\n<pre><code>ul {\n  list-style-image: url('bullet.png');\n}</code></pre>\n\n<h2>Remarques</h2>\n<ul>\n<li>Pour supprimer les puces, utilisez <code>list-style-type: none;</code>.</li>\n<li>La propriété <code>list-style</code> est une propriété raccourcie qui regroupe <code>list-style-type</code>, <code>list-style-position</code> et <code>list-style-image</code>.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>La stylisation des listes CSS permet de rendre les listes plus lisibles et visuellement attrayantes, améliorant ainsi l’expérience utilisateur.</p>"
},{
  "title": "Tableaux CSS (Tables)",
  "description": "<h1>Tableaux CSS (Tables)</h1>\n\n<p>Les tableaux HTML peuvent être stylisés avec CSS pour améliorer leur apparence et leur lisibilité.</p>\n\n<h2>Structure de base d'un tableau HTML</h2>\n<p>Un tableau est constitué des éléments suivants :</p>\n<ul>\n<li><code>&lt;table&gt;</code> : conteneur principal du tableau.</li>\n<li><code>&lt;thead&gt;</code> : section pour les en-têtes de colonnes.</li>\n<li><code>&lt;tbody&gt;</code> : section pour le corps du tableau.</li>\n<li><code>&lt;tr&gt;</code> : ligne du tableau.</li>\n<li><code>&lt;th&gt;</code> : cellule d'en-tête.</li>\n<li><code>&lt;td&gt;</code> : cellule standard.</li>\n</ul>\n\n<h2>Propriétés CSS importantes pour les tableaux</h2>\n<ul>\n<li><code>border</code> — définit la bordure des cellules ou du tableau.</li>\n<li><code>border-collapse</code> — contrôle la façon dont les bordures des cellules se combinent (separate, collapse).</li>\n<li><code>padding</code> — espace intérieur des cellules.</li>\n<li><code>text-align</code> — alignement du texte dans les cellules.</li>\n<li><code>vertical-align</code> — alignement vertical du contenu.</li>\n<li><code>background-color</code> — couleur de fond des cellules, lignes ou colonnes.</li>\n<li><code>width</code> et <code>height</code> — taille des cellules ou du tableau.</li>\n<li><code>caption-side</code> — position du titre du tableau (top, bottom).</li>\n</ul>\n\n<h2>Exemple CSS simple</h2>\n<pre><code>table {\n  border-collapse: collapse;\n  width: 100%;\n}\n\nth, td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: left;\n}\n\nth {\n  background-color: #f2f2f2;\n}</code></pre>\n\n<h2>Styles avancés</h2>\n<p>Vous pouvez styliser les lignes paires et impaires avec : </p>\n<pre><code>tr:nth-child(even) {background-color: #f9f9f9;}\ntr:nth-child(odd) {background-color: #ffffff;}</code></pre>\n\n<p>Ajouter un effet de survol :</p>\n<pre><code>tr:hover {background-color: #ddd;}</code></pre>\n\n<h2>Conclusion</h2>\n<p>Avec CSS, vous pouvez transformer des tableaux HTML simples en tableaux esthétiques et fonctionnels, améliorant ainsi la présentation des données.</p>"
},{
  "title": "Position CSS (Position)",
  "description": "<h1>Position CSS (Position)</h1>\n\n<p>La propriété <code>position</code> en CSS permet de contrôler la manière dont un élément est positionné dans la page.</p>\n\n<h2>Types de position</h2>\n<ul>\n<li><code>static</code> (par défaut) : l’élément est positionné selon le flux normal de la page.</li>\n<li><code>relative</code> : l’élément est positionné relativement à sa position normale, décalé selon <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>.</li>\n<li><code>absolute</code> : l’élément est positionné relativement à son premier ancêtre positionné (autre que <code>static</code>), ou à la fenêtre si aucun ancêtre positionné.</li>\n<li><code>fixed</code> : l’élément est positionné par rapport à la fenêtre (viewport), il reste fixe lors du défilement.</li>\n<li><code>sticky</code> : l’élément se comporte comme <code>relative</code> jusqu’à atteindre une certaine position dans la fenêtre où il devient <code>fixed</code>.</li>\n</ul>\n\n<h2>Propriétés complémentaires</h2>\n<ul>\n<li><code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code> : définissent les offsets (décalages) pour un élément positionné (sauf <code>static</code>).</li>\n<li><code>z-index</code> : contrôle la superposition des éléments positionnés (plus la valeur est élevée, plus l’élément est au premier plan).</li>\n</ul>\n\n<h2>Exemples</h2>\n<pre><code>/* Position relative: décalage de 10px vers la droite et 20px vers le bas */\n.element {\n  position: relative;\n  top: 20px;\n  left: 10px;\n}\n\n/* Position absolute: positionné par rapport à son parent positionné */\n.parent {\n  position: relative;\n}\n.child {\n  position: absolute;\n  top: 0;\n  right: 0;\n}\n\n/* Position fixed: fixé en haut à droite de la fenêtre */\n.fixed-element {\n  position: fixed;\n  top: 0;\n  right: 0;\n}\n\n/* Position sticky: reste collé en haut après défilement */\n.sticky-element {\n  position: sticky;\n  top: 0;\n  background: #fff;\n}</code></pre>\n\n<h2>Remarques</h2>\n<ul>\n<li>Les éléments en position <code>absolute</code> sont retirés du flux normal, ce qui peut affecter la disposition des autres éléments.</li>\n<li><code>sticky</code> fonctionne uniquement si l’élément a un conteneur avec un espace suffisant.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>La propriété <code>position</code> est essentielle pour créer des mises en page complexes et gérer le positionnement précis des éléments dans une page web.</p>"
},{
  "title": "Flexbox CSS",
  "description": "<h1>Flexbox CSS</h1>\n\n<p>Flexbox (Flexible Box Layout) est un modèle de mise en page CSS qui permet d’agencer les éléments dans un conteneur de manière flexible et efficace, même lorsque leur taille est inconnue ou dynamique.</p>\n\n<h2>Concepts clés</h2>\n<ul>\n<li><strong>Conteneur flex</strong> : l’élément parent où on applique <code>display: flex;</code>.</li>\n<li><strong>Éléments flex</strong> : les enfants directs du conteneur flex.</li>\n<li><strong>Axe principal</strong> (<em>main axis</em>) : direction principale des éléments flex (horizontal par défaut).</li>\n<li><strong>Axe transversal</strong> (<em>cross axis</em>) : perpendiculaire à l’axe principal (vertical par défaut).</li>\n</ul>\n\n<h2>Propriétés du conteneur flex</h2>\n<ul>\n<li><code>display: flex;</code> ou <code>inline-flex;</code> : définit un conteneur flex.</li>\n<li><code>flex-direction</code> : définit l’axe principal (row, row-reverse, column, column-reverse).</li>\n<li><code>flex-wrap</code> : contrôle le retour à la ligne des éléments (nowrap, wrap, wrap-reverse).</li>\n<li><code>justify-content</code> : aligne les éléments le long de l’axe principal (flex-start, center, space-between, space-around, space-evenly).</li>\n<li><code>align-items</code> : aligne les éléments le long de l’axe transversal (stretch, flex-start, center, flex-end, baseline).</li>\n<li><code>align-content</code> : aligne les lignes d’éléments flex quand il y a plusieurs lignes (stretch, flex-start, center, flex-end, space-between, space-around).</li>\n</ul>\n\n<h2>Propriétés des éléments flex</h2>\n<ul>\n<li><code>order</code> : définit l’ordre d’affichage (nombre entier, valeur par défaut 0).</li>\n<li><code>flex-grow</code> : définit la capacité de croissance d’un élément (par défaut 0).</li>\n<li><code>flex-shrink</code> : définit la capacité de rétrécissement (par défaut 1).</li>\n<li><code>flex-basis</code> : taille initiale avant distribution de l’espace (auto, px, %).</li>\n<li><code>flex</code> : raccourci pour <code>flex-grow</code>, <code>flex-shrink</code> et <code>flex-basis</code>.</li>\n<li><code>align-self</code> : remplace <code>align-items</code> pour un élément individuel.</li>\n</ul>\n\n<h2>Exemple simple</h2>\n<pre><code>.container {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.item {\n  flex: 1;\n  margin: 10px;\n}</code></pre>\n\n<h2>Utilisations courantes</h2>\n<ul>\n<li>Création de barres de navigation.</li>\n<li>Alignement centré horizontal et vertical.</li>\n<li>Disposition de cartes ou blocs adaptatifs.</li>\n<li>Répartition de l’espace dynamique entre éléments.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>Flexbox simplifie grandement la création de mises en page flexibles et responsives, offrant un contrôle précis sur l’alignement, la direction et la taille des éléments dans un conteneur.</p>"
},{
  "title": "Grid CSS",
  "description": "<h1>Grid CSS</h1>\n\n<p>CSS Grid Layout est un système bidimensionnel qui permet de créer des mises en page complexes en divisant une page en zones ou en lignes et colonnes.</p>\n\n<h2>Concepts clés</h2>\n<ul>\n<li><strong>Conteneur Grid</strong> : élément parent avec <code>display: grid;</code>.</li>\n<li><strong>Cellules Grid</strong> : les enfants directs du conteneur.</li>\n<li><strong>Lignes et colonnes</strong> : définissent la grille en lignes horizontales et colonnes verticales.</li>\n</ul>\n\n<h2>Propriétés du conteneur Grid</h2>\n<ul>\n<li><code>grid-template-columns</code> et <code>grid-template-rows</code> : définissent la taille des colonnes et lignes.</li>\n<li><code>grid-column-gap</code> et <code>grid-row-gap</code> : espacements entre colonnes et lignes.</li>\n<li><code>grid-gap</code> : raccourci pour définir à la fois les gaps ligne et colonne.</li>\n<li><code>grid-template-areas</code> : nomme les zones de la grille pour un placement plus simple.</li>\n<li><code>justify-items</code> et <code>align-items</code> : alignement des éléments dans leurs cellules respectives.</li>\n<li><code>justify-content</code> et <code>align-content</code> : alignement de la grille entière dans son conteneur.</li>\n</ul>\n\n<h2>Propriétés des éléments Grid</h2>\n<ul>\n<li><code>grid-column-start</code>, <code>grid-column-end</code> : définissent la position en colonne.</li>\n<li><code>grid-row-start</code>, <code>grid-row-end</code> : définissent la position en ligne.</li>\n<li><code>grid-area</code> : raccourci pour définir la position et la taille sur la grille.</li>\n</ul>\n\n<h2>Exemple simple</h2>\n<pre><code>.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 10px;\n}\n\n.item {\n  background-color: lightblue;\n  padding: 20px;\n}</code></pre>\n\n<h2>Utilisations courantes</h2>\n<ul>\n<li>Création de mises en page complexes responsives.</li>\n<li>Placement précis d’éléments sur une grille.</li>\n<li>Disposition de galeries d’images ou tableaux de contenu.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>CSS Grid est un outil puissant pour organiser les éléments sur deux axes, facilitant la création de designs modernes et adaptatifs.</p>"
},{
  "title": "Transitions CSS",
  "description": "<h1>Transitions CSS</h1>\n\n<p>Les transitions CSS permettent d'animer les changements de propriétés CSS sur une durée donnée, rendant les effets visuels plus fluides et agréables.</p>\n\n<h2>Propriétés principales</h2>\n<ul>\n<li><code>transition-property</code> : définit la ou les propriétés CSS à animer (ex: <code>background-color</code>, <code>width</code>).</li>\n<li><code>transition-duration</code> : durée de la transition (ex: <code>2s</code>, <code>500ms</code>).</li>\n<li><code>transition-timing-function</code> : courbe de progression (ex: <code>ease</code>, <code>linear</code>, <code>ease-in-out</code>).</li>\n<li><code>transition-delay</code> : délai avant le début de la transition.</li>\n<li><code>transition</code> : propriété raccourcie combinant les précédentes.</li>\n</ul>\n\n<h2>Exemple simple</h2>\n<pre><code>.button {\n  background-color: blue;\n  transition: background-color 0.5s ease;\n}\n.button:hover {\n  background-color: red;\n}</code></pre>\n\n<h2>Fonctionnement</h2>\n<p>Quand une propriété CSS change (via un hover, un script, ou un changement de classe), la transition anime la valeur entre l'ancienne et la nouvelle.</p>\n\n<h2>Utilisations courantes</h2>\n<ul>\n<li>Animations au survol des boutons.</li>\n<li>Effets d’apparition/disparition progressifs.</li>\n<li>Modification fluide des tailles, couleurs, positions.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>Les transitions CSS sont un moyen simple d'améliorer l'expérience utilisateur avec des animations douces et naturelles.</p>"
},{
  "title": "Animations CSS",
  "description": "<h1>Animations CSS</h1>\n\n<p>Les animations CSS permettent de créer des effets dynamiques et complexes en animant les propriétés CSS au fil du temps, sans avoir besoin de JavaScript.</p>\n\n<h2>Règles clés</h2>\n<ul>\n<li><code>@keyframes</code> : définit les étapes de l'animation avec les styles à différents pourcentages.</li>\n<li><code>animation-name</code> : nom de l'animation (référence un @keyframes).</li>\n<li><code>animation-duration</code> : durée de l'animation.</li>\n<li><code>animation-timing-function</code> : courbe de progression (ex: ease, linear).</li>\n<li><code>animation-delay</code> : délai avant démarrage.</li>\n<li><code>animation-iteration-count</code> : nombre de répétitions (ex: infinite).</li>\n<li><code>animation-direction</code> : sens de l'animation (normal, alternate).</li>\n<li><code>animation-fill-mode</code> : définit l'état de l'élément avant/après l'animation.</li>\n</ul>\n\n<h2>Exemple simple</h2>\n<pre><code>@keyframes slidein {\n  from { transform: translateX(-100%); }\n  to { transform: translateX(0); }\n}\n.box {\n  animation-name: slidein;\n  animation-duration: 2s;\n  animation-timing-function: ease-out;\n  animation-iteration-count: 1;\n}</code></pre>\n\n<h2>Fonctionnement</h2>\n<p>Les animations sont jouées automatiquement selon les paramètres donnés, en interpolant les styles entre les étapes définies dans <code>@keyframes</code>.</p>\n\n<h2>Usages courants</h2>\n<ul>\n<li>Animations d’entrée/sortie d’éléments.</li>\n<li>Effets d’attention (clignotements, pulsations).</li>\n<li>Transitions complexes non réalisables avec <code>transition</code>.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>Les animations CSS offrent une grande flexibilité pour rendre les sites web interactifs et attrayants sans alourdir le code JavaScript.</p>"
},{
  "title": "Transformation CSS (Transforms)",
  "description": "<h1>Transformation CSS (Transforms)</h1>\n\n<p>Les transformations CSS permettent de modifier la forme, la taille, la position et l'orientation des éléments HTML sans affecter le flux du document.</p>\n\n<h2>Types de transformations</h2>\n<ul>\n  <li><code>translate()</code> : déplace un élément sur l'axe X et/ou Y.</li>\n  <li><code>rotate()</code> : fait pivoter un élément autour d'un point.</li>\n  <li><code>scale()</code> : agrandit ou réduit la taille d'un élément.</li>\n  <li><code>skew()</code> : déforme un élément en inclinant ses axes.</li>\n  <li><code>matrix()</code> : transformation combinée avancée.</li>\n</ul>\n\n<h2>Syntaxe</h2>\n<pre><code>transform: translate(50px, 100px);\ntransform: rotate(45deg);\ntransform: scale(1.5);\ntransform: skew(30deg, 20deg);\ntransform: matrix(1, 0, 0, 1, 0, 0);</code></pre>\n\n<h2>Points d’origine (transform-origin)</h2>\n<p>Définit le point autour duquel la transformation s’effectue (par défaut au centre de l’élément).</p>\n<pre><code>transform-origin: center;\ntransform-origin: top left;</code></pre>\n\n<h2>Exemple</h2>\n<pre><code>.box {\n  width: 100px;\n  height: 100px;\n  background: red;\n  transform: rotate(45deg) translate(50px, 0);\n}</code></pre>\n\n<h2>Usage</h2>\n<ul>\n  <li>Créer des animations et effets visuels.</li>\n  <li>Modifier l’apparence des éléments sans changer leur emplacement dans le flux.</li>\n  <li>Améliorer l’interactivité et le design.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>Les transformations CSS sont un outil puissant pour manipuler les éléments visuellement de manière fluide et performante.</p>"
},{
  "title": "Ombres CSS (Shadows)",
  "description": "<h1>Ombres CSS (Shadows)</h1>\n\n<p>Les ombres CSS permettent d'ajouter des effets d'ombre aux éléments HTML, apportant de la profondeur et du réalisme au design.</p>\n\n<h2>Types d'ombres</h2>\n<ul>\n  <li><code>box-shadow</code> : ajoute une ombre portée autour d'un élément bloc.</li>\n  <li><code>text-shadow</code> : ajoute une ombre portée au texte.</li>\n</ul>\n\n<h2>Propriété <code>box-shadow</code></h2>\n<p>Syntaxe :</p>\n<pre><code>box-shadow: h-offset v-offset blur-radius spread-radius color inset;</code></pre>\n<ul>\n  <li><strong>h-offset</strong> : décalage horizontal de l'ombre.</li>\n  <li><strong>v-offset</strong> : décalage vertical de l'ombre.</li>\n  <li><strong>blur-radius</strong> (optionnel) : flou de l'ombre.</li>\n  <li><strong>spread-radius</strong> (optionnel) : extension de l'ombre.</li>\n  <li><strong>color</strong> : couleur de l'ombre.</li>\n  <li><strong>inset</strong> (optionnel) : ombre interne.</li>\n</ul>\n\n<h2>Exemple <code>box-shadow</code></h2>\n<pre><code>.box {\n  width: 150px;\n  height: 150px;\n  background: #3498db;\n  box-shadow: 10px 10px 5px rgba(0, 0, 0, 0.5);\n}</code></pre>\n\n<h2>Propriété <code>text-shadow</code></h2>\n<p>Syntaxe :</p>\n<pre><code>text-shadow: h-offset v-offset blur-radius color;</code></pre>\n\n<h2>Exemple <code>text-shadow</code></h2>\n<pre><code>h1 {\n  color: #333;\n  text-shadow: 2px 2px 4px #999;\n}</code></pre>\n\n<h2>Conseils</h2>\n<ul>\n  <li>Utiliser les ombres avec parcimonie pour ne pas alourdir la page.</li>\n  <li>Tester différents paramètres pour obtenir un effet naturel.</li>\n  <li>Utiliser <code>rgba</code> pour des ombres semi-transparentes.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>Les ombres CSS sont un excellent moyen d'améliorer visuellement vos pages web avec peu d'effort.</p>"
},{
  "title": "Media Queries CSS",
  "description": "<h1>Media Queries CSS</h1>\n\n<p>Les Media Queries permettent d’adapter le design d’un site web en fonction des caractéristiques du dispositif d’affichage, comme la taille de l’écran, la résolution, l’orientation, etc.</p>\n\n<h2>Syntaxe</h2>\n<pre><code>@media media-type and (condition) {\n  /* règles CSS spécifiques */\n}</code></pre>\n\n<h2>Exemple simple</h2>\n<pre><code>@media screen and (max-width: 600px) {\n  body {\n    background-color: lightblue;\n  }\n}</code></pre>\n<p>Ce code applique un fond bleu clair pour les écrans dont la largeur est au maximum de 600 pixels.</p>\n\n<h2>Media types courants</h2>\n<ul>\n  <li><code>all</code> : tous les dispositifs (par défaut)</li>\n  <li><code>screen</code> : écran d’ordinateur, tablette, smartphone</li>\n  <li><code>print</code> : impression</li>\n  <li><code>speech</code> : synthèse vocale</li>\n</ul>\n\n<h2>Conditions fréquemment utilisées</h2>\n<ul>\n  <li><code>width, min-width, max-width</code> : largeur de la fenêtre</li>\n  <li><code>height, min-height, max-height</code> : hauteur de la fenêtre</li>\n  <li><code>orientation</code> : portrait ou paysage</li>\n  <li><code>resolution</code> : résolution de l’écran</li>\n</ul>\n\n<h2>Exemple avancé</h2>\n<pre><code>@media only screen and (min-width: 768px) and (max-width: 1024px) {\n  .container {\n    width: 80%;\n  }\n}</code></pre>\n\n<h2>Conseils</h2>\n<ul>\n  <li>Utiliser les media queries pour rendre votre site responsive.</li>\n  <li>Tester sur plusieurs tailles d’écran pour une meilleure expérience utilisateur.</li>\n  <li>Éviter les règles CSS contradictoires dans différentes media queries.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>Les Media Queries sont essentielles pour créer des sites web adaptatifs et accessibles sur tous les types d’appareils.</p>"
},{
  "title": "Responsive Design CSS",
  "description": "<h1>Responsive Design CSS</h1>\n\n<p>Le Responsive Design consiste à créer des pages web capables de s'adapter automatiquement à la taille et aux caractéristiques de l'écran de l'utilisateur, pour offrir une expérience optimale sur tous les appareils (ordinateurs, tablettes, smartphones, etc.).</p>\n\n<h2>Principes clés</h2>\n<ul>\n  <li>Utilisation de grilles flexibles et fluides.</li>\n  <li>Images et médias adaptatifs.</li>\n  <li>Utilisation des Media Queries pour ajuster la mise en page.</li>\n</ul>\n\n<h2>Techniques courantes</h2>\n<ul>\n  <li><strong>Flexible Grid Layout</strong> : Utilisation de pourcentages ou unités relatives pour la largeur des colonnes.</li>\n  <li><strong>Flexible Images</strong> : Images qui s'adaptent à la taille de leur conteneur grâce à <code>max-width: 100%</code>.</li>\n  <li><strong>Media Queries</strong> : Adaptation des styles CSS en fonction des caractéristiques du dispositif.</li>\n</ul>\n\n<h2>Exemple simple</h2>\n<pre><code>img {\n  max-width: 100%;\n  height: auto;\n}\n\n@media (max-width: 600px) {\n  .container {\n    width: 100%;\n  }\n}</code></pre>\n\n<h2>Outils utiles</h2>\n<ul>\n  <li>Frameworks CSS comme Bootstrap ou Foundation.</li>\n  <li>Unités relatives : %, em, rem, vw, vh.</li>\n  <li>Flexbox et Grid pour des mises en page flexibles.</li>\n</ul>\n\n<h2>Avantages</h2>\n<ul>\n  <li>Améliore l'expérience utilisateur sur tous les appareils.</li>\n  <li>Facilite la maintenance d'un seul site au lieu de plusieurs versions.</li>\n  <li>Optimise le référencement SEO.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>Le Responsive Design est devenu indispensable pour tout site moderne, garantissant accessibilité et confort de lecture partout.</p>"
},{
  "title": "Sélecteurs avancés CSS",
  "description": "<h1>Les Sélecteurs avancés CSS</h1>\n\n<p>Les sélecteurs avancés CSS permettent de cibler précisément des éléments HTML selon des critères complexes, au-delà des sélecteurs simples comme les classes, identifiants ou balises.</p>\n\n<h2>Principaux sélecteurs avancés</h2>\n<ul>\n  <li><strong>Sélecteur d'attributs :</strong> Cible les éléments possédant un attribut ou un attribut avec une valeur spécifique. Exemple : <code>input[type=\"text\"]</code>.</li>\n  <li><strong>Sélecteurs d'enfants et descendants :</strong> <code>div > p</code> cible les paragraphes enfants directs de div, <code>div p</code> cible tous les descendants.</li>\n  <li><strong>Sélecteurs de pseudo-classes :</strong> Ciblent un état particulier d’un élément, par exemple : <code>a:hover</code>, <code>input:focus</code>, <code>li:first-child</code>.</li>\n  <li><strong>Sélecteurs de pseudo-éléments :</strong> Permettent de cibler une partie d’un élément, comme <code>::before</code>, <code>::after</code>.</li>\n  <li><strong>Sélecteurs de groupes :</strong> Permettent de regrouper plusieurs sélecteurs, par exemple : <code>h1, h2, h3</code>.</li>\n</ul>\n\n<h2>Exemples</h2>\n<pre><code>/* Sélectionner tous les inputs de type texte */\ninput[type=\"text\"] {\n  border: 1px solid #ccc;\n}\n\n/* Sélectionner le premier enfant li d'une liste */\nul li:first-child {\n  font-weight: bold;\n}\n\n/* Ajouter du contenu avant un élément */\np::before {\n  content: \"Note: \";\n  color: red;\n}</code></pre>\n\n<h2>Utilisation avancée</h2>\n<ul>\n  <li>Combinaison des sélecteurs pour cibler des éléments très spécifiques.</li>\n  <li>Gestion des états dynamiques avec <code>:hover</code>, <code>:focus</code>.</li>\n  <li>Création d'effets visuels avec pseudo-éléments.</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>Maîtriser les sélecteurs avancés est crucial pour écrire du CSS efficace et précis, améliorant la maintenance et la performance du code.</p>"
},{
  "title": "Variables CSS (Custom Properties)",
  "description": "<h1>Variables CSS (Propriétés personnalisées)</h1>\n\n<p>Les variables CSS, appelées propriétés personnalisées, permettent de stocker des valeurs réutilisables dans une feuille de style CSS. Elles améliorent la maintenabilité et la cohérence du code.</p>\n\n<h2>Déclaration et utilisation</h2>\n<p>Les variables CSS sont déclarées avec un double tiret <code>--</code> et utilisées avec la fonction <code>var()</code>.</p>\n\n<pre><code>/* Déclaration d'une variable */\n:root {\n  --main-color: #3498db;\n  --padding: 16px;\n}\n\n/* Utilisation de la variable */\ndiv {\n  color: var(--main-color);\n  padding: var(--padding);\n}</code></pre>\n\n<h2>Scope des variables</h2>\n<p>Les variables peuvent être déclarées globalement dans <code>:root</code> ou localement dans un sélecteur spécifique, ce qui limite leur portée.</p>\n\n<h2>Valeurs de fallback</h2>\n<p>La fonction <code>var()</code> accepte une valeur de repli si la variable n'est pas définie :</p>\n\n<pre><code>color: var(--main-color, black);</code></pre>\n\n<h2>Avantages</h2>\n<ul>\n  <li>Facilitent la gestion des thèmes (ex : clair/sombre).</li>\n  <li>Permettent de modifier facilement les valeurs globales.</li>\n  <li>Améliorent la clarté et la maintenance du CSS.</li>\n</ul>\n\n<h2>Compatibilité</h2>\n<p>Les variables CSS sont compatibles avec tous les navigateurs modernes.</p>\n\n<h2>Conclusion</h2>\n<p>Les variables CSS sont un outil puissant pour écrire un CSS plus modulaire, flexible et facile à maintenir.</p>"
},{
  "title": "Pseudo-classes CSS",
  "description": "<h1>Pseudo-classes CSS</h1>\n\n<p>Les pseudo-classes CSS permettent de définir un style pour un état particulier d’un élément HTML, comme lorsqu’un utilisateur survole un bouton, ou lorsqu’un champ de formulaire est focus.</p>\n\n<h2>Syntaxe</h2>\n<p>La pseudo-classe est ajoutée après un sélecteur avec un double point :</p>\n<pre><code>selector:pseudo-class {\n  /* styles */\n}</code></pre>\n\n<h2>Exemples courants</h2>\n<ul>\n  <li><code>:hover</code> — style lorsque la souris survole un élément.</li>\n  <li><code>:focus</code> — style lorsqu’un élément (ex : champ de formulaire) est activé.</li>\n  <li><code>:active</code> — style lors du clic sur un élément.</li>\n  <li><code>:visited</code> — style des liens visités.</li>\n  <li><code>:nth-child(n)</code> — cible le nième enfant d’un parent.</li>\n</ul>\n\n<h2>Exemple</h2>\n<pre><code>a:hover {\n  color: red;\n}\n\ninput:focus {\n  border-color: blue;\n}</code></pre>\n\n<h2>Usage avancé</h2>\n<p>Les pseudo-classes peuvent être combinées avec d’autres sélecteurs pour cibler précisément les éléments selon leur état.</p>\n\n<h2>Compatibilité</h2>\n<p>La plupart des pseudo-classes sont compatibles avec tous les navigateurs modernes, mais certaines avancées comme <code>:nth-child()</code> peuvent avoir un support plus récent.</p>\n\n<h2>Conclusion</h2>\n<p>Les pseudo-classes sont essentielles pour rendre les interfaces interactives et dynamiques sans JavaScript.</p>"
},{
  "title": "Pseudo-éléments CSS",
  "description": "<h1>Pseudo-éléments CSS</h1>\n\n<p>Les pseudo-éléments CSS permettent de styliser des parties spécifiques d’un élément, comme la première lettre ou la première ligne, sans avoir besoin de modifier le HTML.</p>\n\n<h2>Syntaxe</h2>\n<p>Ils s’écrivent avec deux points avant le nom :</p>\n<pre><code>selector::pseudo-element {\n  /* styles */\n}</code></pre>\n\n<h2>Exemples courants</h2>\n<ul>\n  <li><code>::before</code> — insère du contenu avant le contenu de l’élément.</li>\n  <li><code>::after</code> — insère du contenu après le contenu de l’élément.</li>\n  <li><code>::first-letter</code> — cible la première lettre d’un texte.</li>\n  <li><code>::first-line</code> — cible la première ligne d’un texte.</li>\n</ul>\n\n<h2>Exemple</h2>\n<pre><code>p::first-letter {\n  font-size: 2em;\n  color: red;\n}\n\np::before {\n  content: \"Note: \";\n  font-weight: bold;\n}</code></pre>\n\n<h2>Usage</h2>\n<p>Ils permettent d’ajouter des décorations, des icônes, ou de modifier l’apparence sans modifier le contenu HTML.</p>\n\n<h2>Compatibilité</h2>\n<p>Supportés par tous les navigateurs modernes. La notation avec deux points est recommandée, même si certains navigateurs plus anciens acceptent un seul deux-points.</p>\n\n<h2>Conclusion</h2>\n<p>Les pseudo-éléments sont des outils puissants pour enrichir le design et l’ergonomie des pages web.</p>"
},{
  "title": "Attributs CSS",
  "description": "<h1>Attributs CSS</h1>\n\n<p>Les attributs CSS permettent de sélectionner des éléments HTML en fonction de la présence ou de la valeur d'un attribut spécifique. Cela permet d'appliquer des styles ciblés de manière précise.</p>\n\n<h2>Syntaxe de base</h2>\n<p>La sélection par attribut utilise des crochets <code>[]</code> avec le nom de l'attribut :</p>\n<pre><code>selector[attribut] {\n  /* styles */\n}</code></pre>\n\n<h2>Exemples</h2>\n<ul>\n  <li><code>a[href]</code> : sélectionne tous les liens <code>&lt;a&gt;</code> ayant un attribut <code>href</code>.</li>\n  <li><code>input[type=\"text\"]</code> : sélectionne les champs de formulaire de type texte.</li>\n  <li><code>img[alt~=\"flower\"]</code> : sélectionne les images dont l'attribut <code>alt</code> contient le mot « flower ».</li>\n</ul>\n\n<h2>Types de sélecteurs d'attributs</h2>\n<ul>\n  <li><code>[attr]</code> : éléments avec l'attribut <code>attr</code>.</li>\n  <li><code>[attr=value]</code> : éléments où l'attribut vaut exactement <code>value</code>.</li>\n  <li><code>[attr~=value]</code> : éléments où l'attribut contient un mot égal à <code>value</code>.</li>\n  <li><code>[attr|=value]</code> : éléments où l'attribut commence par <code>value</code> ou <code>value-</code>.</li>\n  <li><code>[attr^=value]</code> : éléments où l'attribut commence par <code>value</code>.</li>\n  <li><code>[attr$=value]</code> : éléments où l'attribut finit par <code>value</code>.</li>\n  <li><code>[attr*=value]</code> : éléments où l'attribut contient <code>value</code>.</li>\n</ul>\n\n<h2>Exemple pratique</h2>\n<pre><code>input[type=\"email\"] {\n  border: 2px solid blue;\n}\n\na[href^=\"https\"] {\n  color: green;\n}</code></pre>\n\n<h2>Compatibilité</h2>\n<p>Supporté par tous les navigateurs modernes, ce type de sélecteur est très utile pour cibler précisément des éléments sans classes supplémentaires.</p>\n\n<h2>Conclusion</h2>\n<p>Les sélecteurs d’attributs enrichissent la puissance du CSS en permettant des sélections fines basées sur les attributs des éléments HTML.</p>"
},{
  "title": "CSS pour les formulaires",
  "description": "<h1>CSS pour les formulaires</h1>\n\n<p>Les formulaires HTML sont composés de différents éléments tels que <code>input</code>, <code>textarea</code>, <code>select</code>, <code>button</code>, etc. Le CSS permet de personnaliser l'apparence de ces éléments pour améliorer l'expérience utilisateur.</p>\n\n<h2>Styles de base pour les champs de formulaire</h2>\n<pre><code>input, textarea, select, button {\n  font-family: Arial, sans-serif;\n  font-size: 16px;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n}</code></pre>\n\n<h2>Focus et états</h2>\n<p>Pour améliorer l'accessibilité et la visibilité, on peut modifier le style lorsque l’élément est en focus ou désactivé :</p>\n<pre><code>input:focus, textarea:focus, select:focus {\n  border-color: #66afe9;\n  outline: none;\n  box-shadow: 0 0 8px rgba(102, 175, 233, 0.6);\n}\n\ninput:disabled, textarea:disabled, select:disabled {\n  background-color: #eee;\n  cursor: not-allowed;\n}</code></pre>\n\n<h2>Personnalisation des boutons</h2>\n<pre><code>button {\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}</code></pre>\n\n<h2>Styles avancés</h2>\n<p>On peut personnaliser les cases à cocher, les boutons radio, et même les sélecteurs avec des techniques plus avancées :</p>\n<ul>\n  <li>Utilisation de pseudo-éléments pour créer des styles personnalisés.</li>\n  <li>Masquer les éléments natifs et les remplacer par des images ou icônes.</li>\n</ul>\n\n<h2>Exemple de case à cocher personnalisée</h2>\n<pre><code>input[type=\"checkbox\"] {\n  appearance: none;\n  width: 20px;\n  height: 20px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  position: relative;\n  cursor: pointer;\n}\n\ninput[type=\"checkbox\"]:checked::before {\n  content: '\\2713';\n  position: absolute;\n  top: 0;\n  left: 4px;\n  color: green;\n  font-weight: bold;\n}</code></pre>\n\n<h2>Conclusion</h2>\n<p>Le CSS permet de transformer un formulaire basique en une interface utilisateur agréable et facile à utiliser, tout en gardant la compatibilité avec les navigateurs.</p>"
},{
  "title": "CSS pour les boîtes (Box Model)",
  "description": "<h1>CSS pour les boîtes (Box Model)</h1>\n\n<p>Le modèle de boîte CSS (Box Model) est un concept fondamental pour comprendre comment les éléments HTML sont affichés et comment leur taille est calculée.</p>\n\n<h2>Composants du Box Model</h2>\n<p>Chaque élément est représenté comme une boîte rectangulaire composée de :</p>\n<ul>\n  <li><strong>Le contenu</strong> : le texte ou les images à l’intérieur de l’élément.</li>\n  <li><strong>Le padding (remplissage)</strong> : espace entre le contenu et la bordure.</li>\n  <li><strong>La bordure</strong> : contour autour du padding et du contenu.</li>\n  <li><strong>La marge (margin)</strong> : espace extérieur autour de la bordure.</li>\n</ul>\n\n<h2>Visualisation du Box Model</h2>\n<p>Voici un schéma simplifié :</p>\n<pre><code>margin\n  ┌─────────────────────┐\n  │  border             │\n  │  ┌───────────────┐  │\n  │  │ padding       │  │\n  │  │ ┌───────────┐ │  │\n  │  │ │ contenu   │ │  │\n  │  │ └───────────┘ │  │\n  │  └───────────────┘  │\n  └─────────────────────┘</code></pre>\n\n<h2>Propriétés importantes du Box Model</h2>\n<ul>\n  <li><code>width</code> et <code>height</code> : dimensions du contenu.</li>\n  <li><code>padding</code> : espace interne autour du contenu (peut être défini en haut, bas, gauche, droite).</li>\n  <li><code>border</code> : épaisseur, style et couleur de la bordure.</li>\n  <li><code>margin</code> : espace externe autour de la bordure.</li>\n  <li><code>box-sizing</code> : contrôle comment la largeur et la hauteur sont calculées (par défaut, elles incluent uniquement le contenu, mais on peut inclure padding et bordure avec <code>border-box</code>).</li>\n</ul>\n\n<h2>Exemple pratique</h2>\n<pre><code>div {\n  width: 200px;\n  padding: 10px;\n  border: 5px solid black;\n  margin: 15px;\n  box-sizing: border-box;\n}</code></pre>\n<p>Avec <code>box-sizing: border-box;</code>, la largeur totale du <code>div</code> sera de 200px, incluant le padding et la bordure.</p>\n\n<h2>Pourquoi le Box Model est important ?</h2>\n<p>Comprendre le Box Model aide à maîtriser la mise en page, éviter les dépassements, et créer des designs responsives efficaces.</p>\n\n<h2>Conseil</h2>\n<p>Il est courant d’appliquer cette règle globale pour faciliter la gestion des dimensions :</p>\n<pre><code>* {\n  box-sizing: border-box;\n}</code></pre>"
},{
  "title": "Fonctionnement du CSS (Cascade, Héritage, Spécificité)",
  "description": "<h1>Fonctionnement du CSS : Cascade, Héritage et Spécificité</h1>\n\n<p>Le CSS utilise plusieurs mécanismes pour déterminer quelles règles s’appliquent quand plusieurs styles ciblent le même élément :</p>\n\n<h2>La Cascade</h2>\n<p>La cascade est le mécanisme qui détermine quelle règle CSS est appliquée quand plusieurs règles ciblent le même élément. Les règles sont appliquées selon l’ordre, la spécificité et l’importance.</p>\n\n<h2>L’Héritage</h2>\n<p>Certaines propriétés CSS sont héritées automatiquement des éléments parents vers les éléments enfants. Par exemple, les propriétés de texte comme <code>color</code>, <code>font-family</code>, ou <code>line-height</code> sont héritées, tandis que d’autres propriétés comme <code>margin</code> ou <code>border</code> ne le sont pas.</p>\n\n<h2>La Spécificité</h2>\n<p>La spécificité est un calcul qui détermine la priorité d’une règle CSS. Plus une règle est spécifique, plus elle aura de priorité :</p>\n<ul>\n  <li>Les sélecteurs inline (style directement sur l’élément HTML) ont la plus haute spécificité.</li>\n  <li>Les sélecteurs ID (<code>#id</code>) ont une spécificité élevée.</li>\n  <li>Les sélecteurs de classes (<code>.classe</code>), attributs (<code>[type='text']</code>) et pseudo-classes (<code>:hover</code>) ont une spécificité moyenne.</li>\n  <li>Les sélecteurs d’éléments (<code>div</code>, <code>p</code>) ont la plus basse spécificité.</li>\n</ul>\n\n<h2>Importance</h2>\n<p>Une règle peut être forcée à s’appliquer avec <code>!important</code>, qui a la priorité la plus élevée, même au-delà de la spécificité. Toutefois, il faut l’utiliser avec parcimonie.</p>\n\n<h2>Exemple de cascade et spécificité</h2>\n<pre><code>p {\n  color: blue;\n}\n\n.text {\n  color: red;\n}\n\n#unique {\n  color: green;\n}\n\n&lt;p id=\"unique\" class=\"text\"&gt;Ce texte sera vert&lt;/p&gt;</code></pre>\n<p>Dans cet exemple, la couleur verte l’emporte car le sélecteur ID a une plus grande spécificité.</p>\n\n<h2>Résumé</h2>\n<ul>\n  <li>La cascade détermine l’ordre d’application des règles.</li>\n  <li>L’héritage transmet certaines propriétés aux enfants.</li>\n  <li>La spécificité détermine quelle règle a la priorité.</li>\n  <li>Le <code>!important</code> force la priorité.</li>\n</ul>\n\n<p>Ces mécanismes permettent de contrôler précisément le style des éléments HTML.</p>"
},{
  "title": "Préprocesseurs CSS (Sass, Less)",
  "description": "<h1>Préprocesseurs CSS : Sass et Less</h1>\n\n<p>Les préprocesseurs CSS sont des outils qui permettent d’écrire du CSS de manière plus puissante et organisée. Ils ajoutent des fonctionnalités qui n’existent pas en CSS pur, comme les variables, les fonctions, les boucles, et l’imbrication.</p>\n\n<h2>Pourquoi utiliser un préprocesseur ?</h2>\n<ul>\n  <li><strong>Variables :</strong> pour réutiliser des valeurs (couleurs, marges, polices) facilement.</li>\n  <li><strong>Imbrication :</strong> pour écrire les sélecteurs imbriqués de façon plus lisible.</li>\n  <li><strong>Mixins :</strong> pour créer des groupes de propriétés réutilisables.</li>\n  <li><strong>Fonctions et opérations :</strong> pour manipuler les valeurs CSS (calculs, couleurs, etc.).</li>\n  <li><strong>Organisation :</strong> possibilité de séparer le CSS en plusieurs fichiers et les importer.</li>\n</ul>\n\n<h2>Sass (Syntactically Awesome Stylesheets)</h2>\n<p>Sass est l’un des préprocesseurs CSS les plus populaires. Il propose deux syntaxes :</p>\n<ul>\n  <li><strong>Sass :</strong> syntaxe indentée sans accolades ni points-virgules.</li>\n  <li><strong>SCSS :</strong> syntaxe compatible CSS avec accolades et points-virgules.</li>\n</ul>\n\n<h2>Exemple SCSS :</h2>\n<pre><code>$primary-color: #3498db;\n\nbody {\n  font-family: Arial, sans-serif;\n  color: $primary-color;\n\n  nav {\n    background-color: darken($primary-color, 10%);\n  }\n}\n</code></pre>\n\n<h2>Less</h2>\n<p>Less est un autre préprocesseur CSS qui offre des fonctionnalités similaires à Sass. Il utilise une syntaxe proche de CSS et peut être compilé côté client ou côté serveur.</p>\n\n<h2>Exemple Less :</h2>\n<pre><code>@primary-color: #3498db;\n\nbody {\n  font-family: Arial, sans-serif;\n  color: @primary-color;\n\n  nav {\n    background-color: darken(@primary-color, 10%);\n  }\n}\n</code></pre>\n\n<h2>Compilation</h2>\n<p>Les fichiers Sass/SCSS ou Less doivent être compilés en CSS avant d’être utilisés dans un site web. Cette étape peut être automatisée avec des outils comme Webpack, Gulp, ou des IDE modernes.</p>\n\n<h2>Conclusion</h2>\n<p>Les préprocesseurs CSS améliorent la productivité et la maintenabilité des feuilles de styles, surtout dans les projets complexes ou de grande taille.</p>"
}
  ]
  },
  {
    "name": "JS",
    "description": "JavaScript est un langage de programmation dynamique qui permet d’ajouter de l’interactivité aux pages web. Il gère les événements, manipule le DOM, communique avec des serveurs, et bien plus encore.",
    "articles": [
      {
  "title": "Introduction à JavaScript",
  "description": "<p>JavaScript est un langage de programmation léger, interprété ou compilé juste-à-temps, qui permet d’ajouter de l’interactivité aux pages web.</p><p>Avec JavaScript, vous pouvez créer des animations, des formulaires dynamiques, des jeux, et bien plus.</p><h2>Inclure JavaScript dans une page HTML</h2><p>Le code JavaScript peut être inséré directement dans une page HTML entre les balises <code>&lt;script&gt;</code> :</p><pre><code>&lt;script&gt;\nalert('Bienvenue dans JavaScript!');\n&lt;/script&gt;</code></pre><p>Ou bien référencé via un fichier externe :</p><pre><code>&lt;script src=\"script.js\"&gt;&lt;/script&gt;</code></pre><h2>Pourquoi utiliser JavaScript ?</h2><ul><li>Il permet d’améliorer l’expérience utilisateur.</li><li>Il peut modifier le contenu HTML et CSS dynamiquement.</li><li>Il gère les événements comme les clics ou les saisies.</li><li>Il peut communiquer avec les serveurs pour charger ou envoyer des données sans recharger la page (Ajax).</li></ul><h2>Où s’exécute JavaScript ?</h2><p>Principalement dans les navigateurs web, mais aussi sur des serveurs (Node.js).</p><h2>Premiers pas</h2><p>Essayez de placer ce code dans votre page HTML et ouvrez-la dans un navigateur :</p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Test JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;script&gt;\n    alert('Bonjour tout le monde !');\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>"
},{
  "title": "Syntaxe JavaScript",
  "description": "<p>La syntaxe JavaScript définit les règles de base pour écrire du code JavaScript valide.</p><h2>Commentaires</h2><p>Les commentaires sont des notes dans le code qui ne sont pas exécutées :</p><ul><li>Commentaire sur une ligne : <code>// Ceci est un commentaire</code></li><li>Commentaire sur plusieurs lignes : <code>/* Ceci est un commentaire sur plusieurs lignes */</code></li></ul><h2>Variables</h2><p>Les variables sont des conteneurs pour stocker des données :</p><pre><code>let x = 5;\nconst y = 'texte';\nvar z = true;</code></pre><p>Types de variables :</p><ul><li><code>let</code> : variable pouvant être réaffectée</li><li><code>const</code> : constante (valeur fixe)</li><li><code>var</code> : ancienne déclaration, éviter aujourd’hui</li></ul><h2>Types de données</h2><p>JavaScript supporte plusieurs types :</p><ul><li><code>Number</code> : nombres (ex: 5, 3.14)</li><li><code>String</code> : chaînes de caractères (ex: \"Bonjour\")</li><li><code>Boolean</code> : vrai/faux</li><li><code>Array</code> : tableau de valeurs</li><li><code>Object</code> : collections de paires clé-valeur</li><li><code>null</code> et <code>undefined</code> : valeurs spéciales</li></ul><h2>Expressions et Opérateurs</h2><p>JavaScript utilise des opérateurs mathématiques et logiques :</p><ul><li>+ (addition ou concaténation)</li><li>- (soustraction)</li><li>* (multiplication)</li><li>/ (division)</li><li>% (modulo)</li><li>==, === (comparaison)</li><li>!=, !== (différent)</li><li>&& (et logique)</li><li>|| (ou logique)</li></ul><h2>Structures de contrôle</h2><p>Les conditions permettent d’exécuter du code selon une situation :</p><pre><code>if (x > 10) {\n  console.log('x est grand');\n} else {\n  console.log('x est petit');\n}</code></pre><p>Les boucles permettent de répéter du code :</p><pre><code>for (let i = 0; i &lt; 5; i++) {\n  console.log(i);\n}</code></pre><h2>Fonctions</h2><p>Les fonctions regroupent du code réutilisable :</p><pre><code>function saluer(nom) {\n  return 'Bonjour ' + nom;\n}\n\nconsole.log(saluer('Alice'));</code></pre>"
},{
  "title": "Variables JavaScript",
  "description": "<p>Les variables sont des conteneurs pour stocker des données et peuvent être modifiées pendant l'exécution du programme.</p><h2>Déclaration de variables</h2><p>Il existe trois façons principales de déclarer des variables en JavaScript :</p><ul><li><code>var</code> : déclaration classique, fonctionnelle ou globale</li><li><code>let</code> : déclaration bloc-scopée (recommandée)</li><li><code>const</code> : constante, ne peut pas être réaffectée</li></ul><h2>Exemples :</h2><pre><code>var x = 5;\nlet y = 10;\nconst z = 15;</code></pre><h2>Types de variables</h2><p>JavaScript est faiblement typé, les variables peuvent contenir différents types :</p><ul><li><code>Number</code> : nombres (ex : 123, 3.14)</li><li><code>String</code> : chaînes de caractères (ex : \"Bonjour\")</li><li><code>Boolean</code> : true ou false</li><li><code>Object</code> : objets, tableaux, fonctions</li><li><code>null</code> et <code>undefined</code> : absence de valeur</li></ul><h2>Portée des variables</h2><p><code>var</code> a une portée fonction, <code>let</code> et <code>const</code> ont une portée de bloc :</p><pre><code>{\n  let a = 10;\n  var b = 20;\n}\n\nconsole.log(b); // 20\nconsole.log(a); // Erreur : a n'est pas défini</code></pre><h2>Bonnes pratiques</h2><ul><li>Préférer <code>let</code> et <code>const</code> pour éviter les erreurs de portée</li><li>Utiliser <code>const</code> autant que possible</li><li>Nommer clairement les variables</li></ul>"
},{
  "title": "Types de données JavaScript",
  "description": "<p>JavaScript prend en charge plusieurs types de données, qui sont utilisés pour stocker différentes valeurs.</p><h2>Types primitifs</h2><ul><li><strong>Number :</strong> Représente les nombres, entiers ou flottants. Exemple : 42, 3.14</li><li><strong>String :</strong> Chaînes de caractères. Exemple : \"Bonjour\"</li><li><strong>Boolean :</strong> Valeurs logiques true ou false.</li><li><strong>Undefined :</strong> Variable déclarée mais non assignée.</li><li><strong>Null :</strong> Valeur intentionnellement vide.</li><li><strong>Symbol :</strong> Valeur unique et immuable, souvent utilisée pour les identifiants d'objet.</li><li><strong>BigInt :</strong> Pour représenter des entiers très grands.</li></ul><h2>Types objets</h2><p>Les objets sont des collections de propriétés :</p><ul><li><strong>Object :</strong> Objet général contenant des paires clé-valeur.</li><li><strong>Array :</strong> Tableau ordonné d’éléments.</li><li><strong>Function :</strong> Blocs de code réutilisables.</li></ul><h2>Type dynamique</h2><p>JavaScript est un langage faiblement typé, les types sont attribués dynamiquement. Une variable peut contenir différentes valeurs de types différents au cours du programme.</p><h2>Exemple :</h2><pre><code>let data = 42;\ndata = \"Bonjour\";\ndata = true;</code></pre>"
}, {
  "title": "Opérateurs JavaScript",
  "description": "<p>Les opérateurs sont utilisés pour effectuer des opérations sur des variables et des valeurs.</p><h2>Types d'opérateurs</h2><ul><li><strong>Opérateurs arithmétiques :</strong> +, -, *, /, %, ++, --</li><li><strong>Opérateurs d'affectation :</strong> =, +=, -=, *=, /=, %=</li><li><strong>Opérateurs de comparaison :</strong> ==, ===, !=, !==, >, <, >=, <=</li><li><strong>Opérateurs logiques :</strong> && (et), || (ou), ! (non)</li><li><strong>Opérateurs conditionnels :</strong> (condition) ? valeur_si_vrai : valeur_si_faux</li></ul><h2>Exemples :</h2><pre><code>// Opérateur arithmétique\nlet x = 10 + 5; // 15\n\n// Opérateur d'affectation\nlet y = 10;\ny += 5; // y vaut 15\n\n// Opérateur de comparaison\nlet isEqual = (x == y); // true ou false\n\n// Opérateur logique\nlet isTrue = (x > 5 && y < 20); // true\n\n// Opérateur conditionnel\nlet result = (x > y) ? 'x est plus grand' : 'y est plus grand ou égal';</code></pre><h2>Notes importantes :</h2><ul><li>Utilisez <code>===</code> pour une comparaison stricte (valeur et type).</li><li>Les opérateurs logiques évaluent des expressions booléennes et retournent un booléen.</li></ul>"
},{
  "title": "Fonctions JavaScript",
  "description": "<p>Une fonction est un bloc de code conçu pour effectuer une tâche particulière. Elle est exécutée lorsqu'elle est appelée.</p><h2>Définir une fonction</h2><pre><code>function maFonction() {\n  console.log('Bonjour le monde');\n}</code></pre><h2>Appeler une fonction</h2><pre><code>maFonction(); // Affiche 'Bonjour le monde'</code></pre><h2>Fonctions avec paramètres</h2><pre><code>function saluer(nom) {\n  console.log('Bonjour ' + nom);\n}\nsaluer('Alice'); // Affiche 'Bonjour Alice'</code></pre><h2>Fonctions avec valeur de retour</h2><pre><code>function addition(a, b) {\n  return a + b;\n}\nlet resultat = addition(5, 3); // resultat vaut 8</code></pre><h2>Fonctions fléchées (ES6)</h2><pre><code>const multiplier = (a, b) => a * b;\nconsole.log(multiplier(4, 5)); // 20</code></pre><h2>Fonctions anonymes</h2><pre><code>setTimeout(function() {\n  console.log('Délai écoulé');\n}, 1000);</code></pre><h2>Portée des variables dans les fonctions</h2><p>Les variables déclarées à l'intérieur d'une fonction sont locales à cette fonction.</p><h2>Conclusion</h2><p>Les fonctions facilitent la réutilisation du code et l'organisation du programme.</p>"
},{
  "title": "Objets JavaScript",
  "description": "<p>Un objet est une collection de propriétés, chaque propriété étant une association clé-valeur.</p><h2>Créer un objet</h2><pre><code>const personne = {\n  nom: 'Dupont',\n  age: 30,\n  profession: 'Développeur'\n};</code></pre><h2>Accéder aux propriétés</h2><pre><code>console.log(personne.nom); // 'Dupont'\nconsole.log(personne['age']); // 30</code></pre><h2>Modifier les propriétés</h2><pre><code>personne.age = 31;\npersonne['profession'] = 'Designer';</code></pre><h2>Ajouter des propriétés</h2><pre><code>personne.email = 'dupont@example.com';</code></pre><h2>Supprimer des propriétés</h2><pre><code>delete personne.profession;</code></pre><h2>Méthodes d'objet</h2><pre><code>const voiture = {\n  marque: 'Toyota',\n  demarrer: function() {\n    console.log('La voiture démarre');\n  }\n};\nvoiture.demarrer(); // 'La voiture démarre'</code></pre><h2>Objets et références</h2><p>Les objets sont passés par référence, donc modifier un objet modifie toutes ses références.</p><h2>Conclusion</h2><p>Les objets sont fondamentaux pour organiser et structurer les données en JavaScript.</p>"
},{
  "title": "Tableaux JavaScript",
  "description": "<p>Les tableaux sont des structures de données qui stockent plusieurs valeurs dans une seule variable.</p><h2>Créer un tableau</h2><pre><code>const fruits = ['Pomme', 'Banane', 'Orange'];</code></pre><h2>Accéder aux éléments</h2><pre><code>console.log(fruits[0]); // Pomme</code></pre><h2>Modifier un élément</h2><pre><code>fruits[1] = 'Mangue';</code></pre><h2>Ajouter un élément</h2><pre><code>fruits.push('Fraise');</code></pre><h2>Supprimer un élément</h2><pre><code>fruits.pop(); // supprime 'Fraise'</code></pre><h2>Parcourir un tableau</h2><pre><code>for(let i = 0; i < fruits.length; i++) {\n  console.log(fruits[i]);\n}</code></pre><p>Les tableaux sont très utilisés en JavaScript pour manipuler des listes de données.</p>"
},{
  "title": "Boucles JavaScript",
  "description": "<p>Les boucles permettent de répéter un bloc de code plusieurs fois, ce qui est utile pour traiter des tableaux ou exécuter des tâches répétitives.</p><h2>La boucle for</h2><pre><code>for (let i = 0; i < 5; i++) {\n  console.log(i);\n}</code></pre><p>Elle répète le code tant que la condition est vraie.</p><h2>La boucle while</h2><pre><code>let i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}</code></pre><p>Elle répète tant que la condition est vraie, vérifiée avant chaque itération.</p><h2>La boucle do...while</h2><pre><code>let i = 0;\ndo {\n  console.log(i);\n  i++;\n} while (i < 5);</code></pre><p>Elle exécute au moins une fois le bloc puis vérifie la condition.</p><h2>La boucle for...of</h2><pre><code>const fruits = ['Pomme', 'Banane', 'Orange'];\nfor (const fruit of fruits) {\n  console.log(fruit);\n}</code></pre><p>Parcourt les éléments d’un tableau ou d’un objet itérable.</p><h2>La boucle for...in</h2><pre><code>const personne = { nom: 'Jean', age: 30 };\nfor (const propriete in personne) {\n  console.log(propriete + ': ' + personne[propriete]);\n}</code></pre><p>Parcourt les propriétés énumérables d’un objet.</p><p>Les boucles sont fondamentales pour gérer les collections et automatiser les traitements répétitifs en JavaScript.</p>"
},{
  "title": "Conditions JavaScript (if...else, switch)",
  "description": "<p>Les conditions permettent d’exécuter du code en fonction de tests logiques.</p><h2>La structure if</h2><pre><code>if (condition) {\n  // code à exécuter si la condition est vraie\n}</code></pre><p>Exemple :</p><pre><code>let age = 18;\nif (age >= 18) {\n  console.log('Adulte');\n}</code></pre><h2>if...else</h2><pre><code>if (condition) {\n  // si vrai\n} else {\n  // si faux\n}</code></pre><p>Exemple :</p><pre><code>let age = 16;\nif (age >= 18) {\n  console.log('Adulte');\n} else {\n  console.log('Mineur');\n}</code></pre><h2>if...else if...else</h2><pre><code>if (condition1) {\n  // si condition1 vraie\n} else if (condition2) {\n  // si condition2 vraie\n} else {\n  // si aucune condition vraie\n}</code></pre><h2>Le switch</h2><pre><code>switch(expression) {\n  case valeur1:\n    // code\n    break;\n  case valeur2:\n    // code\n    break;\n  default:\n    // code si aucune valeur correspond\n}</code></pre><p>Exemple :</p><pre><code>let fruit = 'pomme';\nswitch(fruit) {\n  case 'pomme':\n    console.log('Pomme choisie');\n    break;\n  case 'banane':\n    console.log('Banane choisie');\n    break;\n  default:\n    console.log('Fruit inconnu');\n}</code></pre><p>Les conditions sont essentielles pour contrôler le flux d’exécution dans un programme JavaScript.</p>"
},{
  "title": "Les Événements JavaScript",
  "description": "<p>Les événements permettent d'exécuter du code en réponse à des actions utilisateur ou système, comme un clic, une saisie ou le chargement d'une page.</p><h2>Ajouter un gestionnaire d'événements</h2><pre><code>document.getElementById('monBouton').addEventListener('click', function() {\n  alert('Bouton cliqué !');\n});</code></pre><h2>Événements courants</h2><ul><li><code>click</code> : clic souris</li><li><code>mouseover</code> : souris sur un élément</li><li><code>keydown</code> : touche clavier pressée</li><li><code>load</code> : page ou image chargée</li></ul><h2>Propagation des événements</h2><p>Les événements peuvent se propager de l'élément enfant vers le parent (bubbling) ou de l'élément parent vers l'enfant (capturing).</p><h2>Suppression d'un gestionnaire</h2><pre><code>function maFonction() {\n  alert('Événement');\n}\ndocument.getElementById('monBouton').removeEventListener('click', maFonction);</code></pre><h2>Objets événements</h2><p>Le gestionnaire reçoit un objet événement contenant des informations sur l'événement, comme la cible, le type, etc.</p><h2>Conclusion</h2><p>Les événements sont essentiels pour rendre les pages interactives.</p>"
},{
  "title": "Manipulation du DOM",
  "description": "<p>Le DOM (Document Object Model) représente la structure HTML sous forme d’un arbre d’objets manipulables via JavaScript.</p><h2>Accéder aux éléments</h2><pre><code>const element = document.getElementById('idElement');\nconst elements = document.getElementsByClassName('maClasse');\nconst elementsTag = document.getElementsByTagName('div');\nconst elementQuery = document.querySelector('.maClasse');</code></pre><h2>Modifier le contenu</h2><pre><code>element.innerHTML = '&lt;p&gt;Nouveau contenu&lt;/p&gt;';\nelement.textContent = 'Texte simple';</code></pre><h2>Modifier les styles</h2><pre><code>element.style.color = 'blue';\nelement.style.backgroundColor = 'yellow';</code></pre><h2>Ajouter/Supprimer des éléments</h2><pre><code>const nouveauDiv = document.createElement('div');\nnouveauDiv.textContent = 'Je suis un nouvel élément';\ndocument.body.appendChild(nouveauDiv);\ndocument.body.removeChild(nouveauDiv);</code></pre><h2>Modifier les attributs</h2><pre><code>element.setAttribute('id', 'nouvelId');\nconst id = element.getAttribute('id');</code></pre><h2>Écouter les événements</h2><pre><code>element.addEventListener('click', function() {\n  alert('Élément cliqué');\n});</code></pre><p>La manipulation du DOM est la base pour créer des pages web dynamiques.</p>"
},{
  "title": "Validation de formulaire",
  "description": "<p>La validation de formulaire permet de vérifier que les données saisies par l'utilisateur sont correctes avant de les envoyer au serveur.</p><h2>Validation côté client avec JavaScript</h2><p>On peut utiliser JavaScript pour vérifier les champs avant l'envoi :</p><pre><code>const form = document.querySelector('form');\nform.addEventListener('submit', function(event) {\n  const email = form.email.value;\n  if (!email.includes('@')) {\n    alert('Veuillez entrer un email valide');\n    event.preventDefault();\n  }\n});</code></pre><h2>Attributs HTML5 pour la validation</h2><p>Les formulaires HTML5 disposent d'attributs utiles :</p><ul><li><code>required</code> : champ obligatoire</li><li><code>type=\"email\"</code> : vérifie la syntaxe email</li><li><code>minlength</code> et <code>maxlength</code> : limites de longueur</li><li><code>pattern</code> : expression régulière pour format personnalisé</li></ul><h2>Exemple HTML avec validation intégrée</h2><pre><code>&lt;form&gt;\n  &lt;input type=\"email\" required placeholder=\"Votre email\"&gt;\n  &lt;input type=\"password\" minlength=\"6\" required&gt;\n  &lt;button type=\"submit\"&gt;Envoyer&lt;/button&gt;\n&lt;/form&gt;</code></pre><h2>Validation côté serveur</h2><p>Il est indispensable de vérifier aussi côté serveur pour des raisons de sécurité et fiabilité.</p><p>La validation côté client améliore l’expérience utilisateur, mais ne doit pas remplacer la validation côté serveur.</p>"
},{
  "title": "JavaScript ES6 (let, const, arrow functions...)",
  "description": "<h2>Introduction à ES6</h2><p>ES6, aussi appelé ECMAScript 2015, est une mise à jour majeure du langage JavaScript qui introduit de nombreuses nouvelles fonctionnalités pour écrire du code plus clair et plus puissant.</p><h2>Déclaration de variables : let et const</h2><p>Avant ES6, on utilisait uniquement <code>var</code> pour déclarer des variables. ES6 introduit :</p><ul><li><code>let</code> : permet de déclarer des variables avec une portée de bloc (scope limité au bloc).</li><li><code>const</code> : permet de déclarer des constantes (valeurs immuables).</li></ul><pre><code>let x = 10;\nconst y = 20;\n\nx = 15; // OK\n// y = 30; // Erreur, const ne peut pas être réassigné</code></pre><h2>Fonctions fléchées (Arrow functions)</h2><p>Une nouvelle syntaxe concise pour définir des fonctions anonymes :</p><pre><code>const add = (a, b) =&gt; a + b;\nconsole.log(add(5, 3)); // 8</code></pre><p>Les fonctions fléchées ont aussi un comportement particulier concernant le mot-clé <code>this</code>, qui est lexicalement lié.</p><h2>Autres nouveautés ES6</h2><ul><li>Classes JavaScript</li><li>Modules import/export</li><li>Templates littéraux (``)</li><li>Destructuration d’objets et tableaux</li><li>Paramètres par défaut</li><li>Opérateurs spread et rest</li></ul><p>ES6 rend le code JavaScript plus moderne, lisible et maintenable.</p>"
},{
  "title": "Classes JavaScript",
  "description": "<h2>Introduction aux Classes en JavaScript</h2><p>Les classes en JavaScript ont été introduites avec ES6 pour fournir une syntaxe plus claire et simple pour créer des objets et gérer l'héritage, tout en restant basées sur le prototype JavaScript.</p><h2>Définir une classe</h2><p>Une classe est définie avec le mot-clé <code>class</code> :</p><pre><code>class Personne {\n  constructor(nom, age) {\n    this.nom = nom;\n    this.age = age;\n  }\n  saluer() {\n    console.log(`Bonjour, je m'appelle ${this.nom} et j'ai ${this.age} ans.`);\n  }\n}</code></pre><h2>Créer une instance</h2><pre><code>const p1 = new Personne('Alice', 30);\np1.saluer(); // Bonjour, je m'appelle Alice et j'ai 30 ans.</code></pre><h2>Héritage avec les classes</h2><p>Les classes permettent aussi d'étendre d'autres classes :</p><pre><code>class Employe extends Personne {\n  constructor(nom, age, poste) {\n    super(nom, age); // Appelle le constructeur de la classe parente\n    this.poste = poste;\n  }\n  afficherPoste() {\n    console.log(`Je travaille comme ${this.poste}.`);\n  }\n}\n\nconst e1 = new Employe('Bob', 40, 'Développeur');\ne1.saluer();\ne1.afficherPoste();</code></pre><h2>Résumé</h2><ul><li>Les classes sont une syntaxe plus lisible pour manipuler les objets en JavaScript.</li><li>La méthode <code>constructor</code> initialise les objets.</li><li>L’héritage se fait avec le mot-clé <code>extends</code>.</li><li><code>super()</code> appelle le constructeur de la classe parente.</li></ul>"
},{
  "title": "Modules JavaScript",
  "description": "<h2>Introduction aux Modules JavaScript</h2><p>Les modules permettent d'organiser le code JavaScript en fichiers distincts, chacun exportant des fonctionnalités et important ce dont il a besoin. Cela facilite la maintenance, la réutilisation et évite la pollution de l’espace global.</p><h2>Exporter du code</h2><p>On peut exporter des variables, fonctions ou classes à l’aide du mot-clé <code>export</code> :</p><pre><code>// fichier math.js\nexport function addition(a, b) {\n  return a + b;\n}\nexport const PI = 3.14159;</code></pre><h2>Importer du code</h2><p>Dans un autre fichier, on peut importer ce qui est exporté :</p><pre><code>// fichier app.js\nimport { addition, PI } from './math.js';\nconsole.log(addition(2, 3)); // 5\nconsole.log(PI); // 3.14159</code></pre><h2>Exportation par défaut</h2><p>Un module peut aussi avoir une exportation par défaut :</p><pre><code>// fichier voiture.js\nexport default class Voiture {\n  constructor(marque) {\n    this.marque = marque;\n  }\n}</code></pre><p>On importe alors ainsi :</p><pre><code>import Voiture from './voiture.js';\nconst maVoiture = new Voiture('Toyota');</code></pre><h2>Résumé</h2><ul><li>Les modules permettent de structurer le code JavaScript.</li><li>On utilise <code>export</code> et <code>import</code> pour partager et récupérer du code.</li><li>Une exportation par défaut (<code>default</code>) est possible.</li></ul>"
},{
  "title": "Promesses (Promises)",
  "description": "<h2>Introduction aux Classes en JavaScript</h2><p>Les classes en JavaScript ont été introduites avec ES6 pour fournir une syntaxe plus claire et simple pour créer des objets et gérer l'héritage, tout en restant basées sur le prototype JavaScript.</p><h2>Définir une classe</h2><p>Une classe est définie avec le mot-clé <code>class</code> :</p><pre><code>class Personne {\n  constructor(nom, age) {\n    this.nom = nom;\n    this.age = age;\n  }\n  saluer() {\n    console.log(`Bonjour, je m'appelle ${this.nom} et j'ai ${this.age} ans.`);\n  }\n}</code></pre><h2>Créer une instance</h2><pre><code>const p1 = new Personne('Alice', 30);\np1.saluer(); // Bonjour, je m'appelle Alice et j'ai 30 ans.</code></pre><h2>Héritage avec les classes</h2><p>Les classes permettent aussi d'étendre d'autres classes :</p><pre><code>class Employe extends Personne {\n  constructor(nom, age, poste) {\n    super(nom, age); // Appelle le constructeur de la classe parente\n    this.poste = poste;\n  }\n  afficherPoste() {\n    console.log(`Je travaille comme ${this.poste}.`);\n  }\n}\n\nconst e1 = new Employe('Bob', 40, 'Développeur');\ne1.saluer();\ne1.afficherPoste();</code></pre><h2>Résumé</h2><ul><li>Les classes sont une syntaxe plus lisible pour manipuler les objets en JavaScript.</li><li>La méthode <code>constructor</code> initialise les objets.</li><li>L’héritage se fait avec le mot-clé <code>extends</code>.</li><li><code>super()</code> appelle le constructeur de la classe parente.</li></ul>"
},{
  "title": "Async/Await",
  "description": "<h2>Introduction à Async/Await en JavaScript</h2><p><strong>Async</strong> et <strong>await</strong> sont des mots-clés introduits en ES2017 pour simplifier la gestion des promesses et rendre le code asynchrone plus lisible.</p><h2>Fonction Async</h2><p>Une fonction déclarée avec <code>async</code> retourne toujours une promesse :</p><pre><code>async function maFonction() {\n  return 'Résultat';\n}\n\nmaFonction().then(result => console.log(result)); // Affiche 'Résultat'</code></pre><h2>Mot-clé Await</h2><p>Le mot-clé <code>await</code> permet de suspendre l’exécution d’une fonction async jusqu’à la résolution d’une promesse :</p><pre><code>async function fetchData() {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  console.log(data);\n}</code></pre><h2>Gestion des erreurs</h2><p>On peut utiliser <code>try...catch</code> pour capturer les erreurs dans une fonction async :</p><pre><code>async function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    if (!response.ok) throw new Error('Erreur HTTP');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Erreur attrapée:', error);\n  }\n}</code></pre><h2>Résumé</h2><ul><li>Les fonctions async facilitent l’écriture de code asynchrone lisible.</li><li><code>await</code> pause l’exécution jusqu’à ce que la promesse soit résolue.</li><li>Les erreurs doivent être gérées avec <code>try...catch</code>.</li></ul>"
},{
  "title": "Gestion des erreurs (try...catch)",
  "description": "<h2>Introduction à la gestion des erreurs en JavaScript</h2><p>La gestion des erreurs permet de capturer et traiter les erreurs qui peuvent survenir lors de l'exécution du code, évitant ainsi des plantages inattendus.</p><h2>La structure try...catch</h2><p>Elle permet d'exécuter un bloc de code et d'intercepter les erreurs qui s'y produisent :</p><pre><code>try {\n  // Code susceptible de générer une erreur\n  let result = someFunction();\n  console.log(result);\n} catch (error) {\n  // Code exécuté en cas d'erreur\n  console.error('Erreur attrapée:', error.message);\n}</code></pre><h2>Bloc finally</h2><p>Le bloc <code>finally</code> s'exécute toujours, qu'une erreur soit survenue ou non :</p><pre><code>try {\n  // Code\n} catch (error) {\n  // Gestion de l'erreur\n} finally {\n  // Code exécuté dans tous les cas\n  console.log('Fin du traitement');\n}</code></pre><h2>Gestion des erreurs dans les fonctions asynchrones</h2><p>Dans les fonctions <code>async</code>, on utilise souvent <code>try...catch</code> pour gérer les erreurs liées aux promesses :</p><pre><code>async function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Erreur attrapée:', error);\n  }\n}</code></pre><h2>Lancer des erreurs personnalisées</h2><p>On peut créer et lancer des erreurs personnalisées avec <code>throw</code> :</p><pre><code>function checkNumber(num) {\n  if (num <= 0) {\n    throw new Error('Le nombre doit être positif');\n  }\n  return num;\n}\n\ntry {\n  checkNumber(-1);\n} catch (error) {\n  console.error(error.message);\n}</code></pre>"
},{
  "title": "JSON en JavaScript",
  "description": "<h2>Qu'est-ce que JSON ?</h2><p>JSON (JavaScript Object Notation) est un format léger d’échange de données, facile à lire et à écrire pour les humains, et facile à analyser et générer pour les machines.</p><h2>Utilisation principale</h2><p>JSON est souvent utilisé pour envoyer et recevoir des données entre un client et un serveur.</p><h2>Convertir un objet JavaScript en JSON</h2><p>La méthode <code>JSON.stringify()</code> convertit un objet JavaScript en chaîne JSON :</p><pre><code>const obj = { nom: \"Jean\", age: 30 };\nconst jsonStr = JSON.stringify(obj);\nconsole.log(jsonStr); // '{\"nom\":\"Jean\",\"age\":30}'</code></pre><h2>Convertir une chaîne JSON en objet JavaScript</h2><p>La méthode <code>JSON.parse()</code> convertit une chaîne JSON valide en objet JavaScript :</p><pre><code>const jsonStr = '{\"nom\":\"Jean\",\"age\":30}';\nconst obj = JSON.parse(jsonStr);\nconsole.log(obj.nom); // Jean\nconsole.log(obj.age); // 30</code></pre><h2>Erreurs fréquentes</h2><ul><li>Le JSON doit être valide : guillemets doubles pour les clés et les chaînes.</li><li>Les fonctions ne sont pas valides en JSON.</li><li>Les valeurs doivent être des types JSON valides (nombre, chaîne, booléen, tableau, objet, null).</li></ul><h2>Exemple complet</h2><pre><code>const personne = {\n  nom: \"Alice\",\n  age: 25,\n  hobbies: [\"lecture\", \"sport\"]\n};\n\nconst json = JSON.stringify(personne);\nconsole.log(json);\n\nconst personne2 = JSON.parse(json);\nconsole.log(personne2.hobbies[0]); // lecture</code></pre>"
},{
  "title": "Stockage local (localStorage & sessionStorage)",
  "description": "<h2>Qu'est-ce que le stockage Web ?</h2><p>Le stockage Web permet de sauvegarder des données localement dans le navigateur de l'utilisateur, ce qui est utile pour conserver des informations entre les sessions ou pendant la navigation.</p><h2>localStorage vs sessionStorage</h2><ul><li><strong>localStorage</strong> : les données sont stockées sans date d'expiration et persistent même après la fermeture du navigateur.</li><li><strong>sessionStorage</strong> : les données sont stockées uniquement pour la session en cours et sont supprimées à la fermeture de l’onglet ou du navigateur.</li></ul><h2>Stocker des données</h2><pre><code>// Stocker une donnée\nlocalStorage.setItem('nom', 'Alice');\nsessionStorage.setItem('nom', 'Alice');</code></pre><h2>Récupérer des données</h2><pre><code>// Récupérer une donnée\nconst nomLocal = localStorage.getItem('nom');\nconst nomSession = sessionStorage.getItem('nom');\nconsole.log(nomLocal); // Alice\nconsole.log(nomSession); // Alice</code></pre><h2>Supprimer des données</h2><pre><code>// Supprimer une donnée\nlocalStorage.removeItem('nom');\nsessionStorage.removeItem('nom');</code></pre><h2>Effacer tout le stockage</h2><pre><code>localStorage.clear();\nsessionStorage.clear();</code></pre><h2>Stocker des objets</h2><p>Il faut convertir les objets en chaîne JSON avant de les stocker :</p><pre><code>const user = { nom: 'Alice', age: 25 };\nlocalStorage.setItem('user', JSON.stringify(user));\n\nconst userStr = localStorage.getItem('user');\nconst userObj = JSON.parse(userStr);\nconsole.log(userObj.nom); // Alice</code></pre><h2>Limitations</h2><ul><li>Chaque domaine a une limite de stockage (en général 5 Mo).</li><li>Les données ne sont pas cryptées par défaut.</li></ul><h2>Exemple pratique</h2><pre><code>// Sauvegarder le thème préféré\ndocument.getElementById('saveBtn').addEventListener('click', () => {\n  const theme = document.getElementById('themeSelect').value;\n  localStorage.setItem('theme', theme);\n});\n\n// Charger le thème au démarrage\nwindow.onload = () => {\n  const theme = localStorage.getItem('theme');\n  if(theme) {\n    document.body.className = theme;\n  }\n};</code></pre>"
},{
  "title": "API Fetch",
  "description": "<h2>Qu'est-ce que l'API Fetch ?</h2><p>L'API Fetch est une interface moderne permettant de faire des requêtes HTTP asynchrones en JavaScript. Elle remplace XMLHttpRequest avec une syntaxe plus simple et basée sur les Promesses.</p><h2>Utiliser fetch()</h2><pre><code>fetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Erreur :', error));</code></pre><h2>Paramètres de fetch()</h2><p>fetch() accepte un second argument optionnel pour configurer la requête :</p><pre><code>fetch(url, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({ nom: 'Alice', age: 25 })\n})</code></pre><h2>Méthodes HTTP courantes</h2><ul><li><strong>GET</strong> : récupérer des données</li><li><strong>POST</strong> : envoyer des données</li><li><strong>PUT</strong> : mettre à jour des données</li><li><strong>DELETE</strong> : supprimer des données</li></ul><h2>Gérer les réponses</h2><p>fetch() retourne une Promesse qui se résout en un objet Response :</p><pre><code>fetch(url)\n  .then(response => {\n    if (!response.ok) {\n      throw new Error('Erreur HTTP : ' + response.status);\n    }\n    return response.json();\n  })\n  .then(data => console.log(data))\n  .catch(error => console.error('Erreur:', error));</code></pre><h2>Exemple complet avec async/await</h2><pre><code>async function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    if (!response.ok) {\n      throw new Error('Erreur HTTP : ' + response.status);\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Erreur :', error);\n  }\n}\nfetchData();</code></pre><h2>Conclusion</h2><p>L'API Fetch est simple, flexible, et fortement recommandée pour toute communication réseau côté client.</p>"
},{
  "title": "Web APIs (Geolocation, Canvas, etc.)",
  "description": "<h2>Qu'est-ce qu'une Web API ?</h2><p>Les Web APIs sont des interfaces fournies par les navigateurs permettant d’accéder à des fonctionnalités avancées comme la géolocalisation, le dessin sur canevas, la gestion du stockage local, et bien d’autres.</p><h2>Géolocalisation</h2><p>L’API Geolocation permet d’obtenir la position géographique d’un utilisateur :</p><pre><code>navigator.geolocation.getCurrentPosition(\n  position => {\n    console.log('Latitude :', position.coords.latitude);\n    console.log('Longitude :', position.coords.longitude);\n  },\n  error => console.error('Erreur géolocalisation :', error)\n);</code></pre><h2>Canvas</h2><p>L’élément <code>&lt;canvas&gt;</code> permet de dessiner graphiquement en JavaScript :</p><pre><code>const canvas = document.getElementById('monCanvas');\nconst ctx = canvas.getContext('2d');\nctx.fillStyle = 'blue';\nctx.fillRect(10, 10, 100, 50);</code></pre><h2>Autres Web APIs courantes</h2><ul><li><strong>LocalStorage</strong> : stockage persistant clé-valeur dans le navigateur.</li><li><strong>SessionStorage</strong> : stockage temporaire pendant la session de navigation.</li><li><strong>Web Workers</strong> : exécution de scripts en arrière-plan.</li><li><strong>WebSockets</strong> : communication bidirectionnelle en temps réel.</li><li><strong>Notification API</strong> : afficher des notifications natives.</li></ul><h2>Conclusion</h2><p>Les Web APIs étendent considérablement les capacités de JavaScript côté client, permettant de créer des applications web riches et interactives.</p>"
},{
  "title": "Manipulation des dates (Date object)",
  "description": "<h2>Introduction à l'objet Date en JavaScript</h2><p>L'objet <code>Date</code> permet de créer, manipuler et formater des dates et heures en JavaScript.</p><h2>Créer une date</h2><pre><code>const date1 = new Date(); // date actuelle\nconst date2 = new Date('2025-07-03T12:00:00'); // date spécifique</code></pre><h2>Obtenir des composants d'une date</h2><ul><li><code>getFullYear()</code> : année</li><li><code>getMonth()</code> : mois (0-11)</li><li><code>getDate()</code> : jour du mois (1-31)</li><li><code>getHours()</code>, <code>getMinutes()</code>, <code>getSeconds()</code> : heures, minutes, secondes</li></ul><h2>Modifier une date</h2><pre><code>date1.setFullYear(2026);\ndate1.setMonth(11); // décembre\ndate1.setDate(25);</code></pre><h2>Calculs sur les dates</h2><p>Les dates peuvent être converties en millisecondes depuis l'époque (1970) pour faire des calculs :</p><pre><code>const diffMs = date2 - date1; // différence en millisecondes\nconst diffDays = diffMs / (1000 * 60 * 60 * 24); // en jours</code></pre><h2>Formatage</h2><p>Utiliser <code>toLocaleDateString()</code> et <code>toLocaleTimeString()</code> pour formater :</p><pre><code>date1.toLocaleDateString('fr-FR'); // '03/07/2025'</code></pre><h2>Conclusion</h2><p>L'objet Date est essentiel pour gérer les dates et heures dans les applications JavaScript, avec de nombreuses méthodes pour créer, manipuler et formater des dates.</p>"
},{
  "title": "Regex en JavaScript",
  "description": "<h2>Introduction aux expressions régulières (Regex)</h2><p>Les expressions régulières permettent de rechercher, valider et manipuler des chaînes de caractères en utilisant des motifs (patterns).</p><h2>Créer une expression régulière</h2><pre><code>const regex1 = /abc/;\nconst regex2 = new RegExp('abc');</code></pre><h2>Méthodes principales</h2><ul><li><code>test()</code> : teste si une chaîne correspond au pattern (retourne true/false)</li><li><code>exec()</code> : retourne le résultat détaillé de la recherche</li></ul><h2>Exemple simple</h2><pre><code>const regex = /hello/;\nconsole.log(regex.test('hello world')); // true</code></pre><h2>Caractères spéciaux</h2><ul><li><code>.</code> : n'importe quel caractère</li><li><code>*</code> : zéro ou plusieurs répétitions</li><li><code>+</code> : une ou plusieurs répétitions</li><li><code>?</code> : zéro ou une répétition</li><li><code>\\d</code> : chiffre</li><li><code>\\w</code> : caractère alphanumérique</li><li><code>\\s</code> : espace blanc</li></ul><h2>Groupes et classes de caractères</h2><p>Utiliser des crochets <code>[]</code> pour définir une classe, et parenthèses <code>()</code> pour des groupes capturants.</p><h2>Options (modificateurs)</h2><ul><li><code>i</code> : insensible à la casse</li><li><code>g</code> : global (toutes les occurrences)</li><li><code>m</code> : multi-lignes</li></ul><h2>Exemple avancé</h2><pre><code>const regex = /\\b\\w+\\b/g;\nconst text = 'Voici quelques mots';\nconst mots = text.match(regex);\nconsole.log(mots); // ['Voici', 'quelques', 'mots']</code></pre><h2>Conclusion</h2><p>Les expressions régulières sont très puissantes pour valider, rechercher et manipuler des chaînes, mais demandent de la pratique pour maîtriser leur syntaxe.</p>"
},{
  "title": "Debugging JavaScript",
  "description": "<h2>Introduction au debugging en JavaScript</h2><p>Le debugging est l'art de trouver et corriger les erreurs dans le code JavaScript.</p><h2>Utilisation de la console</h2><p>La console du navigateur est un outil essentiel pour afficher des messages et erreurs :</p><pre><code>console.log('Valeur :', variable);\nconsole.error('Erreur détectée');\nconsole.warn('Attention');</code></pre><h2>Les points d'arrêt (breakpoints)</h2><p>Avec les outils de développement (DevTools), vous pouvez placer des points d'arrêt dans le code pour suspendre l'exécution et inspecter les variables.</p><h2>Debugger statement</h2><p>Vous pouvez insérer la commande <code>debugger;</code> dans le code pour forcer un point d'arrêt :</p><pre><code>function test() {\n  debugger;\n  console.log('Debugging');\n}</code></pre><h2>Profilage et performances</h2><p>Les DevTools permettent aussi de profiler l'exécution pour optimiser les performances.</p><h2>Outils supplémentaires</h2><ul><li>Extensions de navigateur pour debugging avancé</li><li>Linting pour détecter les erreurs à la compilation</li></ul><h2>Conclusion</h2><p>Le debugging est une compétence clé pour tout développeur JavaScript, à maîtriser avec les outils fournis par les navigateurs.</p>"
},{
  "title": "JavaScript Strict Mode",
  "description": "<h2>Introduction au Strict Mode</h2><p>Le mode strict est une fonctionnalité introduite dans ECMAScript 5 qui permet d'activer une version plus stricte du JavaScript.</p><h2>Activation du mode strict</h2><p>Pour activer le mode strict, il suffit d'ajouter <code>'use strict';</code> en début de script ou de fonction :</p><pre><code>'use strict';\nfunction maFonction() {\n  // code en mode strict\n}</code></pre><h2>Effets du mode strict</h2><ul><li>Empêche l'utilisation de variables non déclarées.</li><li>Empêche la suppression de variables, fonctions ou arguments.</li><li>Interdit l'utilisation de certains mots réservés pour le futur.</li><li>Le <code>this</code> dans une fonction appelée globalement est <code>undefined</code> au lieu de l'objet global.</li><li>Empêche la duplication des noms de propriétés ou paramètres.</li></ul><h2>Pourquoi utiliser le mode strict ?</h2><p>Il aide à écrire un code plus sûr et plus propre, en évitant des erreurs silencieuses.</p><h2>Conclusion</h2><p>Il est recommandé d'utiliser le mode strict dans tous les scripts modernes pour améliorer la qualité et la sécurité du code.</p>"
},{
  "title": "Héritage en JavaScript",
  "description": "<h2>Introduction à l’héritage en JavaScript</h2><p>JavaScript utilise un modèle d’héritage basé sur les prototypes. Chaque objet a un lien interne vers un autre objet appelé prototype.</p><h2>Prototype et chaîne de prototypes</h2><p>Lorsqu’on accède à une propriété d’un objet, JavaScript recherche d’abord dans l’objet lui-même, puis dans son prototype, et ainsi de suite jusqu’à la fin de la chaîne.</p><h2>Création d’un objet avec héritage</h2><pre><code>function Animal(nom) {\n  this.nom = nom;\n}\nAnimal.prototype.parle = function() {\n  console.log(this.nom + ' fait un bruit.');\n};\n\nfunction Chien(nom) {\n  Animal.call(this, nom);\n}\nChien.prototype = Object.create(Animal.prototype);\nChien.prototype.constructor = Chien;\nChien.prototype.parle = function() {\n  console.log(this.nom + ' aboie.');\n};\n\nconst monChien = new Chien('Rex');\nmonChien.parle(); // Rex aboie.</code></pre><h2>Classes ES6 et héritage</h2><p>Avec ES6, on peut utiliser la syntaxe <code>class</code> pour gérer l’héritage plus simplement :</p><pre><code>class Animal {\n  constructor(nom) {\n    this.nom = nom;\n  }\n  parle() {\n    console.log(`${this.nom} fait un bruit.`);\n  }\n}\n\nclass Chien extends Animal {\n  parle() {\n    console.log(`${this.nom} aboie.`);\n  }\n}\n\nconst monChien = new Chien('Rex');\nmonChien.parle(); // Rex aboie.</code></pre><h2>Conclusion</h2><p>L’héritage en JavaScript repose sur les prototypes, et la syntaxe des classes simplifie la gestion de l’héritage.</p>"
},{
  "title": "Closures en JavaScript",
  "description": "<h2>Qu'est-ce qu'une closure ?</h2><p>Une closure est une fonction qui a accès à sa propre portée, à la portée de la fonction parente et à la portée globale, même après que la fonction parente ait terminé son exécution.</p><h2>Exemple simple</h2><pre><code>function init() {\n  let compteur = 0;\n  return function() {\n    compteur++;\n    console.log(compteur);\n  }\n}\n\nconst increment = init();\nincrement(); // 1\nincrement(); // 2\nincrement(); // 3</code></pre><h2>Pourquoi utiliser les closures ?</h2><ul><li>Pour créer des variables privées.</li><li>Pour maintenir un état entre les appels de fonction.</li><li>Pour créer des fonctions personnalisées avec un contexte spécifique.</li></ul><h2>Fonctionnement interne</h2><p>La fonction retournée « capture » la variable <code>compteur</code> même après la fin de la fonction <code>init</code>, ce qui lui permet de continuer à accéder à cette variable.</p><h2>Conclusion</h2><p>Les closures sont une caractéristique puissante de JavaScript pour gérer la portée et la confidentialité des données.</p>"
},{
  "title": "Callback functions",
  "description": "<h2>Qu'est-ce qu'un callback ?</h2><p>Un callback est une fonction passée en argument à une autre fonction, qui est ensuite exécutée à un moment donné dans cette fonction parente.</p><h2>Exemple simple</h2><pre><code>function saluer(nom, callback) {\n  console.log(\"Bonjour \" + nom);\n  callback();\n}\n\nfunction finSalutation() {\n  console.log(\"Fin du message.\");\n}\n\nsaluer(\"Jean\", finSalutation);</code></pre><h2>Utilité des callbacks</h2><ul><li>Gérer des tâches asynchrones (comme les requêtes réseau).</li><li>Permettre de personnaliser le comportement d'une fonction.</li></ul><h2>Callbacks anonymes</h2><pre><code>saluer(\"Emma\", function() {\n  console.log(\"Fonction anonyme appelée après salutation\");\n});</code></pre><h2>Problèmes potentiels</h2><ul><li><strong>Callback Hell</strong> : empilement excessif de callbacks imbriqués.</li><li>Difficulté à gérer les erreurs ou à maintenir le code lisible.</li></ul><h2>Alternatives modernes</h2><p>Les <code>Promises</code> et <code>async/await</code> sont souvent utilisées aujourd’hui à la place des callbacks pour gérer l’asynchronisme.</p>"
},{
  "title": "Scope en JavaScript",
  "description": "<h2>Qu'est-ce que le scope ?</h2><p>Le scope (portée) détermine l'accessibilité (visibilité) des variables dans différentes parties de votre code.</p><h2>Types de scope</h2><ul><li><strong>Scope global :</strong> Une variable déclarée en dehors de toute fonction est globale et accessible partout.</li><li><strong>Scope local :</strong> Une variable déclarée à l'intérieur d'une fonction est locale à cette fonction.</li><li><strong>Scope de bloc :</strong> Avec <code>let</code> et <code>const</code>, une variable peut être limitée à un bloc <code>{ ... }</code>.</li></ul><h2>Exemples</h2><pre><code>let a = 10; // portée globale\n\nfunction test() {\n  let b = 20; // portée locale à test\n  console.log(a); // OK\n  console.log(b); // OK\n}\n\nconsole.log(a); // OK\nconsole.log(b); // Erreur : b n'est pas défini</code></pre><h2>Hoisting et scope</h2><p>Les déclarations avec <code>var</code> sont \"hoistées\" (remontées) mais pas initialisées. <code>let</code> et <code>const</code> ne sont pas accessibles avant leur déclaration (zone morte temporelle).</p><pre><code>console.log(x); // undefined\nvar x = 5;\n\nconsole.log(y); // ReferenceError\nlet y = 10;</code></pre><h2>Scope imbriqués</h2><p>Chaque fonction peut accéder aux variables de ses scopes parents :</p><pre><code>function exterieur() {\n  let x = \"Bonjour\";\n  function interieur() {\n    console.log(x);\n  }\n  interieur();\n}</code></pre><h2>Bonnes pratiques</h2><ul><li>Évitez d'utiliser <code>var</code>, préférez <code>let</code> ou <code>const</code>.</li><li>Limitez la portée des variables au strict nécessaire.</li><li>Utilisez des fonctions pour encapsuler les données sensibles ou temporaires.</li></ul>"
},{
  "title": "Prototype JavaScript",
  "description": "<h2>Qu'est-ce qu'un prototype en JavaScript ?</h2><p>En JavaScript, chaque objet possède un prototype, qui est un autre objet dont il hérite des propriétés et des méthodes. Cela fait partie du système d'héritage basé sur les prototypes.</p><h2>Prototype et fonctions constructrices</h2><p>Lorsque vous créez une fonction constructeur, JavaScript y associe un objet <code>prototype</code>. Les objets créés avec <code>new</code> hériteront de ce prototype.</p><pre><code>function Person(nom) {\n  this.nom = nom;\n}\n\nPerson.prototype.saluer = function() {\n  console.log(\"Bonjour, je m'appelle \" + this.nom);\n};\n\nconst p1 = new Person(\"Alice\");\np1.saluer(); // Bonjour, je m'appelle Alice</code></pre><h2>Chaîne de prototypes</h2><p>Chaque objet a un lien vers son prototype, et ce prototype a lui-même un prototype, formant une chaîne appelée \"prototype chain\".</p><pre><code>console.log(p1.toString()); // Hérité de Object.prototype</code></pre><h2>Vérifier le prototype</h2><ul><li><code>Object.getPrototypeOf(obj)</code> permet de voir le prototype d’un objet.</li><li><code>instanceof</code> vérifie si un objet hérite d’un prototype spécifique.</li></ul><pre><code>console.log(Object.getPrototypeOf(p1) === Person.prototype); // true\nconsole.log(p1 instanceof Person); // true</code></pre><h2>Modifier un prototype existant</h2><p>Vous pouvez ajouter dynamiquement des méthodes à des objets via leur prototype :</p><pre><code>Array.prototype.direBonjour = function() {\n  console.log(\"Bonjour depuis un tableau !\");\n};\n\nlet arr = [];\narr.direBonjour(); // Bonjour depuis un tableau !</code></pre><h2>Attention aux effets secondaires</h2><ul><li>Modifier les prototypes natifs (comme <code>Array.prototype</code>) peut provoquer des conflits avec d'autres bibliothèques ou du code tiers.</li><li>Utilisez cette méthode avec précaution dans les projets partagés ou publics.</li></ul><h2>Alternatives modernes</h2><p>Depuis ES6, il est recommandé d’utiliser la syntaxe des classes qui encapsule automatiquement le comportement des prototypes :</p><pre><code>class Personne {\n  constructor(nom) {\n    this.nom = nom;\n  }\n  saluer() {\n    console.log(`Bonjour, je m'appelle ${this.nom}`);\n  }\n}</code></pre>"
},{
  "title": "Event Loop et Asynchronisme",
  "description": "<h2>Introduction à l'asynchronisme</h2><p>JavaScript est un langage <strong>mono-thread</strong>, c'est-à-dire qu’il ne peut exécuter qu’une seule tâche à la fois. Cependant, grâce à l’asynchronisme, il peut gérer des opérations longues (comme des requêtes réseau) sans bloquer l’exécution du reste du code.</p><h2>Call Stack (pile d’appels)</h2><p>Le <strong>call stack</strong> est la structure de données qui gère l’exécution des fonctions. Chaque fois qu’une fonction est appelée, elle est ajoutée au sommet de la pile.</p><pre><code>function hello() {\n  console.log(\"Bonjour\");\n}\nhello();</code></pre><h2>Web APIs</h2><p>Dans un navigateur, certaines fonctionnalités comme <code>setTimeout</code>, <code>fetch</code>, ou <code>addEventListener</code> sont fournies par les Web APIs, en dehors du moteur JavaScript.</p><h2>Callback Queue</h2><p>Une fois que les Web APIs ont terminé leur travail, elles placent leur résultat dans la <strong>callback queue</strong> (file d’attente des rappels).</p><h2>Event Loop</h2><p>L’<strong>event loop</strong> est le mécanisme qui surveille la pile d’appels (call stack) et la file d’attente. Si la pile est vide, il pousse les fonctions de la file d’attente vers la pile pour les exécuter.</p><h2>Exemple simplifié</h2><pre><code>console.log(\"Début\");\n\nsetTimeout(() => {\n  console.log(\"Exécuté plus tard\");\n}, 0);\n\nconsole.log(\"Fin\");</code></pre><p><strong>Sortie :</strong><br>Début<br>Fin<br>Exécuté plus tard</p><h2>Promises, Microtasks et Macrotasks</h2><ul><li><strong>Macrotasks :</strong> <code>setTimeout</code>, <code>setInterval</code>, etc.</li><li><strong>Microtasks :</strong> <code>Promise.then</code>, <code>queueMicrotask</code>. Elles sont exécutées avant les macrotasks.</li></ul><pre><code>console.log(\"1\");\n\nPromise.resolve().then(() => console.log(\"2\"));\n\nsetTimeout(() => console.log(\"3\"), 0);\n\nconsole.log(\"4\");</code></pre><p><strong>Sortie :</strong><br>1<br>4<br>2<br>3</p><h2>Pourquoi c’est important ?</h2><p>Comprendre l’event loop est essentiel pour éviter les bugs liés au timing, aux animations, à l'exécution différée, ou au traitement d’API asynchrone.</p><h2>Bonnes pratiques</h2><ul><li>Utilisez <code>async/await</code> pour simplifier la lecture du code asynchrone.</li><li>Évitez les boucles bloquantes qui empêcheraient l’event loop de tourner.</li><li>Gérez les erreurs asynchrones avec <code>try/catch</code> dans les fonctions <code>async</code>.</li></ul>"
},{
  "title": "Opérateurs avancés (Spread, Rest, Destructuring)",
  "description": "<h2>1. Opérateur Spread (<code>...</code>)</h2><p>L’opérateur <strong>spread</strong> permet de décomposer un tableau ou un objet en éléments individuels.</p><h3>Exemple avec des tableaux :</h3><pre><code>const fruits = [\"pomme\", \"banane\"];\nconst plusFruits = [\"kiwi\", ...fruits, \"mangue\"];\nconsole.log(plusFruits); // [\"kiwi\", \"pomme\", \"banane\", \"mangue\"]</code></pre><h3>Exemple avec des objets :</h3><pre><code>const user = { nom: \"Jean\", age: 30 };\nconst userAvecVille = { ...user, ville: \"Paris\" };\nconsole.log(userAvecVille);</code></pre><p>Le spread est aussi utile pour :</p><ul><li>Copier des tableaux/objets</li><li>Fusionner des structures</li><li>Passer des arguments à une fonction</li></ul><h2>2. Opérateur Rest (<code>...</code>)</h2><p>Le <strong>rest operator</strong> collecte plusieurs éléments dans une seule variable. C’est l’inverse du spread.</p><h3>Fonctions à paramètres variés :</h3><pre><code>function addition(...nombres) {\n  return nombres.reduce((a, b) => a + b);\n}\nconsole.log(addition(1, 2, 3)); // 6</code></pre><h3>Destructuration avec rest :</h3><pre><code>const [premier, ...autres] = [1, 2, 3, 4];\nconsole.log(premier); // 1\nconsole.log(autres);  // [2, 3, 4]</code></pre><h2>3. Destructuring (déstructuration)</h2><p>Le destructuring permet d’extraire des valeurs d’un tableau ou des propriétés d’un objet.</p><h3>Destructuration de tableau :</h3><pre><code>const couleurs = [\"rouge\", \"vert\", \"bleu\"];\nconst [c1, c2] = couleurs;\nconsole.log(c1); // \"rouge\"</code></pre><h3>Destructuration d’objet :</h3><pre><code>const personne = { nom: \"Alice\", age: 25 };\nconst { nom, age } = personne;\nconsole.log(nom); // \"Alice\"</code></pre><p>On peut aussi renommer :</p><pre><code>const { nom: prenomUtilisateur } = personne;</code></pre><h2>Combinaisons utiles</h2><ul><li>Créer une fonction qui accepte des options avec des valeurs par défaut</li><li>Extraire partiellement des données complexes</li><li>Manipuler facilement les arguments des fonctions</li></ul><h2>Conclusion</h2><p>Ces opérateurs rendent le code JavaScript plus concis, lisible et puissant. Ils sont incontournables pour écrire du code moderne.</p>"
},{
  "title": "JavaScript dans le navigateur vs Node.js",
  "description": "<h2>JavaScript dans le navigateur</h2><p>JavaScript a été initialement conçu pour s’exécuter côté <strong>client</strong>, c’est-à-dire dans un <strong>navigateur web</strong> comme Chrome, Firefox ou Safari. Il permet de rendre les pages web interactives.</p><h3>Fonctionnalités disponibles dans le navigateur :</h3><ul><li>Manipulation du DOM (Document Object Model)</li><li>Gestion des événements utilisateur (clics, clavier, etc.)</li><li>Animations et interactions dynamiques</li><li>Accès aux APIs Web (geolocation, localStorage, etc.)</li><li>Communication avec un serveur via <code>fetch</code> ou <code>XMLHttpRequest</code></li></ul><h3>Exemple :</h3><pre><code>document.querySelector('button').addEventListener('click', () => {\n  alert('Bouton cliqué !');\n});</code></pre><p>Le code s’exécute dans un environnement sécurisé appelé <strong>bac à sable</strong> (sandbox), avec des accès restreints pour éviter des actions dangereuses (comme accéder au système de fichiers).</p><h2>JavaScript avec Node.js</h2><p><strong>Node.js</strong> est un environnement d'exécution JavaScript côté <strong>serveur</strong>, basé sur le moteur V8 de Chrome. Il permet d'exécuter du JS en dehors du navigateur.</p><h3>Fonctionnalités offertes par Node.js :</h3><ul><li>Lire/écrire des fichiers (<code>fs</code>)</li><li>Créer des serveurs web</li><li>Utiliser des bases de données</li><li>Effectuer du scripting système</li><li>Gérer les processus et les flux (streams)</li><li>Utiliser des milliers de packages via <code>npm</code></li></ul><h3>Exemple de serveur HTTP avec Node.js :</h3><pre><code>const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.end('Hello depuis Node.js !');\n});\n\nserver.listen(3000);</code></pre><h2>Principales différences</h2><table><thead><tr><th>Aspect</th><th>Navigateur</th><th>Node.js</th></tr></thead><tbody><tr><td>Usage</td><td>Côté client</td><td>Côté serveur</td></tr><tr><td>APIs disponibles</td><td>DOM, BOM, fetch, alert</td><td>fs, http, process, path</td></tr><tr><td>Sécurité</td><td>Environnement restreint</td><td>Accès complet au système</td></tr><tr><td>Modules</td><td><code>&lt;script&gt;</code>, ES modules</td><td><code>require</code>, ES modules</td></tr><tr><td>Package Manager</td><td>Pas de gestionnaire intégré</td><td><code>npm</code></td></tr></tbody></table><h2>Conclusion</h2><p>JavaScript peut fonctionner aussi bien côté client que côté serveur. Dans un projet moderne, on utilise souvent les deux : JavaScript dans le navigateur pour l’interface, et Node.js côté serveur pour la logique métier, les bases de données ou les API.</p>"
},{
  "title": "JavaScript et sécurité (XSS, CORS...)",
  "description": "<h2>Introduction à la sécurité en JavaScript</h2><p>JavaScript est puissant mais peut aussi introduire des failles de sécurité si mal utilisé. Deux des plus courantes sont le <strong>XSS (Cross-Site Scripting)</strong> et les problèmes liés au <strong>CORS (Cross-Origin Resource Sharing)</strong>.</p><h2>Cross-Site Scripting (XSS)</h2><p><strong>XSS</strong> consiste à injecter du code JavaScript malveillant dans une page web visitée par un utilisateur. Cela permet à un attaquant d’exécuter du code arbitraire, souvent pour voler des cookies ou rediriger l’utilisateur.</p><h3>Exemple de vulnérabilité XSS :</h3><pre><code>// Exemple dangereux\nconst params = new URLSearchParams(window.location.search);\ndocument.body.innerHTML = params.get(\"name\"); // Si ?name=<script>alert(1)</script></code></pre><h3>Prévention :</h3><ul><li>Échapper le contenu HTML dynamiquement</li><li>Utiliser des fonctions comme <code>textContent</code> au lieu de <code>innerHTML</code></li><li>Utiliser un framework qui protège automatiquement (React, Vue, etc.)</li></ul><h2>CORS (Cross-Origin Resource Sharing)</h2><p><strong>CORS</strong> est un mécanisme de sécurité du navigateur qui restreint les requêtes HTTP inter-domaines. Par défaut, une page web ne peut faire des requêtes qu'à son propre domaine.</p><h3>Pourquoi CORS existe ?</h3><p>Pour éviter que des sites malveillants n’accèdent à des données sensibles d’autres sites où l’utilisateur est connecté.</p><h3>Comment fonctionne CORS ?</h3><p>Le serveur cible doit explicitement autoriser l’origine (le domaine) du client via l’en-tête <code>Access-Control-Allow-Origin</code>.</p><pre><code>// Exemple d'en-tête côté serveur\nAccess-Control-Allow-Origin: https://monsite.com</code></pre><p>Sans cet en-tête, le navigateur bloque la réponse.</p><h2>Autres bonnes pratiques de sécurité JavaScript</h2><ul><li><strong>Éviter <code>eval()</code></strong> : dangereux car exécute du code arbitraire</li><li><strong>Limiter l’accès au DOM</strong> : ne pas manipuler des données utilisateur directement dans le HTML</li><li><strong>Utiliser le Content Security Policy (CSP)</strong> : pour limiter les scripts exécutables</li><li><strong>Mettre à jour ses dépendances</strong> : beaucoup de vulnérabilités viennent des bibliothèques</li><li><strong>Utiliser HTTPS</strong> : pour sécuriser la transmission des données</li></ul><h2>Conclusion</h2><p>La sécurité en JavaScript ne doit pas être négligée. Bien que le navigateur fournisse des protections, il est essentiel d’écrire un code sûr, de valider et d’échapper les entrées utilisateur, et de bien configurer les accès réseau.</p>"
}  
    ]
  },
  {
    "name": "React",
    "description": "React est une bibliothèque JavaScript pour construire des interfaces utilisateur. Elle permet de créer des composants réutilisables et de gérer efficacement le DOM grâce à un système de rendu virtuel.",
    "articles": [
      {
  "title": "React Intro",
  "description": "<h2>Introduction à React</h2><p>React est une bibliothèque JavaScript open-source développée par Facebook, utilisée pour construire des interfaces utilisateur interactives et réactives basées sur des composants.</p><h2>Principes clés</h2><ul><li><strong>Composants</strong> : blocs de construction réutilisables de l'interface.</li><li><strong>JSX</strong> : extension de syntaxe combinant JavaScript et HTML.</li><li><strong>Virtual DOM</strong> : React met à jour uniquement les parties modifiées de l'interface, améliorant ainsi les performances.</li></ul><h2>Exemple de composant</h2><pre><code>function Hello(props) {\n  return &lt;h1&gt;Bonjour, {props.name}!&lt;/h1&gt;;\n}\n\n// Utilisation : &lt;Hello name=\"Alice\" /&gt;\n</code></pre><h2>Pourquoi utiliser React ?</h2><ul><li>Création d'interfaces dynamiques facilement maintenables.</li><li>Large écosystème (hooks, routing, gestion d’état).</li><li>Adoption massive dans l’industrie.</li></ul><h2>Conclusion</h2><p>Avec ses composants réutilisables et sa gestion efficace du DOM, React permet de construire des applications web modernes et performantes.</p>"
},{
  "title": "React Get Started",
  "description": "<h2>Commencer avec React</h2><p>Pour utiliser React, vous avez plusieurs options. La plus simple est d'inclure React via une balise <code>&lt;script&gt;</code>, ou de créer une application avec <strong>Create React App</strong>.</p><h3>Méthode 1 : CDN (rapide pour tester)</h3><pre><code>&lt;script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin&gt;&lt;/script&gt;</code></pre><p>Ensuite, vous pouvez écrire du code React dans une balise <code>&lt;script type=\"text/babel\"&gt;</code>.</p><h3>Méthode 2 : Create React App (CRA)</h3><p>CRA est l’outil recommandé pour démarrer un projet React.</p><pre><code>npx create-react-app mon-app\ncd mon-app\nnpm start</code></pre><p>CRA configure automatiquement Babel, Webpack et autres dépendances nécessaires.</p><h3>Structure d’un projet CRA</h3><ul><li><code>public/</code> : fichiers statiques</li><li><code>src/</code> : vos fichiers React (JSX, CSS, etc.)</li></ul><h3>Fichier de base</h3><pre><code>// App.js\nfunction App() {\n  return &lt;h1&gt;Bonjour React&lt;/h1&gt;;\n}\nexport default App;</code></pre><p>Avec cette configuration, vous pouvez commencer à créer des composants React et construire votre application.</p><h3>Conclusion</h3><p>React peut être utilisé très simplement via un CDN ou de manière plus robuste via Create React App. Choisissez selon vos besoins.</p>"
},{
  "title": "React ES6",
  "description": "<h2>React et ES6</h2><p>React utilise intensément les fonctionnalités modernes de JavaScript introduites avec ECMAScript 2015 (ES6) et les versions suivantes. Voici les principales que vous devez connaître pour bien travailler avec React :</p><h3>1. let et const</h3><ul><li><code>let</code> permet de déclarer des variables avec une portée limitée au bloc.</li><li><code>const</code> est utilisé pour les constantes, c’est-à-dire des variables dont la valeur ne change pas.</li></ul><pre><code>const nom = \"React\";\nlet compteur = 0;\n</code></pre><h3>2. Fonctions fléchées</h3><p>Simplifie l’écriture des fonctions et ne lie pas leur propre <code>this</code>.</p><pre><code>const addition = (a, b) => a + b;\n</code></pre><h3>3. Classes ES6</h3><p>React utilise les classes pour définir des composants avec état.</p><pre><code>class MonComposant extends React.Component {\n  render() {\n    return <h1>Bonjour</h1>;\n  }\n}\n</code></pre><h3>4. Modules ES6</h3><p>Permet d’importer et d’exporter des fichiers JavaScript.</p><pre><code>import React from 'react';\nexport default MonComposant;\n</code></pre><h3>5. Destructuring</h3><p>Permet d’extraire rapidement des données d’un objet ou tableau.</p><pre><code>const personne = { nom: \"Jean\", age: 30 };\nconst { nom, age } = personne;\n</code></pre><h3>6. Spread Operator</h3><p>Utilisé pour copier ou fusionner des objets/tableaux.</p><pre><code>const a = [1, 2];\nconst b = [...a, 3];\n</code></pre><h3>7. Rest Operator</h3><p>Rassemble les valeurs restantes dans un tableau.</p><pre><code>function somme(...nombres) {\n  return nombres.reduce((a, b) => a + b);\n}\n</code></pre><h3>8. Template literals</h3><p>Permet d’insérer des expressions dans des chaînes de caractères.</p><pre><code>const nom = \"React\";\nconst message = `Bienvenue à ${nom}`;\n</code></pre><h3>9. Promesses</h3><p>Gère les appels asynchrones, très utile pour les requêtes API.</p><pre><code>fetch('/api')\n  .then(res => res.json())\n  .then(data => console.log(data));\n</code></pre><h3>10. async / await</h3><p>Une syntaxe plus lisible pour gérer l’asynchrone.</p><pre><code>async function chargerDonnees() {\n  const res = await fetch('/api');\n  const data = await res.json();\n  console.log(data);\n}\n</code></pre><p>La maîtrise de ces concepts ES6 est essentielle pour développer efficacement avec React.</p>"
},{
  "title": "React JSX",
  "description": "<h2>Qu'est-ce que JSX ?</h2><p>JSX signifie <strong>JavaScript XML</strong>. C’est une syntaxe qui permet d’écrire du HTML dans du JavaScript. JSX rend le code React plus lisible et plus facile à écrire.</p><h3>Pourquoi JSX ?</h3><ul><li>Permet de décrire l’interface utilisateur de manière déclarative.</li><li>Se compile en appels <code>React.createElement()</code>.</li><li>Favorise l'intégration entre logique et présentation dans les composants.</li></ul><h3>Exemple de JSX</h3><pre><code>const element = <h1>Bonjour, monde !</h1>;\n</code></pre><p>Ce code est transformé par Babel en :</p><pre><code>const element = React.createElement('h1', null, 'Bonjour, monde !');\n</code></pre><h3>Insérer des expressions</h3><p>Vous pouvez insérer du JavaScript dans le JSX en utilisant les accolades <code>{ }</code>.</p><pre><code>const nom = 'Jean';\nconst element = <h1>Bonjour, {nom}</h1>;\n</code></pre><h3>Attributs JSX</h3><ul><li>Utilisez <code>className</code> au lieu de <code>class</code>.</li><li>Les attributs acceptent des expressions JS (ex : <code>{value}</code>).</li></ul><pre><code>const element = <div className=\"container\">Contenu</div>;\n</code></pre><h3>Composants et JSX</h3><p>Les composants React peuvent être utilisés comme balises JSX :</p><pre><code>function Bienvenue(props) {\n  return <h1>Bonjour, {props.nom}</h1>;\n}\n\nconst element = <Bienvenue nom=\"Alice\" />;\n</code></pre><h3>JSX doit avoir un seul élément parent</h3><p>Le code suivant est invalide :</p><pre><code>return (\n  <h1>Titre</h1>\n  <p>Paragraphe</p>\n);\n</code></pre><p>Utilisez plutôt un fragment :</p><pre><code>return (\n  <>\n    <h1>Titre</h1>\n    <p>Paragraphe</p>\n  </>\n);\n</code></pre><h3>Conditions avec JSX</h3><pre><code>{condition ? <p>Oui</p> : <p>Non</p>}\n</code></pre><p>JSX permet une écriture fluide et expressive d’interfaces utilisateur complexes.</p>"
},{
  "title": "React Components",
  "description": "<h2>Qu'est-ce qu'un composant React ?</h2><p>Un composant React est une fonction ou une classe JavaScript qui renvoie des éléments React. Les composants sont les blocs de construction fondamentaux d’une application React.</p><h3>Types de composants</h3><ul><li><strong>Composants fonctionnels</strong> (les plus courants aujourd’hui)</li><li><strong>Composants de classe</strong> (utilisés historiquement)</li></ul><h3>Composant fonctionnel</h3><pre><code>function Bienvenue(props) {\n  return <h1>Bonjour, {props.nom}</h1>;\n}\n</code></pre><p>Appel dans JSX :</p><pre><code><Bienvenue nom=\"Alice\" />\n</code></pre><h3>Composant de classe</h3><pre><code>class Bienvenue extends React.Component {\n  render() {\n    return <h1>Bonjour, {this.props.nom}</h1>;\n  }\n}\n</code></pre><h3>Props</h3><p>Les <code>props</code> (propriétés) permettent de passer des données aux composants. Elles sont en lecture seule.</p><pre><code>function Bienvenue(props) {\n  return <h1>Bonjour, {props.nom}</h1>;\n}\n</code></pre><h3>Composants imbriqués</h3><p>Un composant peut en contenir d'autres :</p><pre><code>function App() {\n  return (\n    <div>\n      <Bienvenue nom=\"Alice\" />\n      <Bienvenue nom=\"Bob\" />\n    </div>\n  );\n}\n</code></pre><h3>Avantages des composants</h3><ul><li>Réutilisables</li><li>Indépendants</li><li>Faciles à tester</li><li>Favorisent la séparation des responsabilités</li></ul><h3>Convention de nommage</h3><p>Les noms des composants doivent commencer par une majuscule (<code>MonComposant</code>) pour que JSX les reconnaisse comme tels.</p><h3>Retour unique</h3><p>Un composant doit retourner un seul élément parent (div ou fragment).</p><p>Les composants rendent l’interface modulaire, claire et évolutive dans React.</p>"
},{
  "title": "React Events",
  "description": "<h2>Les Événements dans React</h2><p>Les événements dans React fonctionnent de manière similaire à ceux du DOM, mais avec quelques différences notables.</p><h3>Différences entre événements React et événements DOM classiques</h3><ul><li>Les noms d’événements sont en camelCase : <code>onClick</code> au lieu de <code>onclick</code>.</li><li>On passe une fonction comme valeur, pas une chaîne de caractères.</li><li>React utilise un système de gestion d’événements synthétiques (synthetic events) pour garantir un comportement identique sur tous les navigateurs.</li></ul><h3>Exemple d'événement React</h3><pre><code>function MonBouton() {\n  function handleClick() {\n    alert('Bouton cliqué !');\n  }\n\n  return <button onClick={handleClick}>Cliquez-moi</button>;\n}\n</code></pre><p>Ici, la fonction <code>handleClick</code> est appelée quand le bouton est cliqué.</p><h3>Passer des arguments à une fonction événementielle</h3><pre><code>function MonBoutonAvecNom(props) {\n  function direBonjour(nom) {\n    alert(`Bonjour ${nom}`);\n  }\n\n  return (\n    <button onClick={() => direBonjour(props.nom)}>\n      Dire bonjour\n    </button>\n  );\n}\n</code></pre><p>On utilise une fonction fléchée pour passer des arguments.</p><h3>Empêcher le comportement par défaut</h3><pre><code>function Lien() {\n  function handleClick(e) {\n    e.preventDefault();\n    alert('Le lien a été cliqué, mais la redirection a été empêchée.');\n  }\n\n  return (\n    <a href=\"https://example.com\" onClick={handleClick}>\n      Lien</a>\n  );\n}\n</code></pre><p>La méthode <code>e.preventDefault()</code> empêche l'action par défaut du navigateur.</p><h3>Événements courants dans React</h3><ul>\n<li><code>onClick</code> : clic</li>\n<li><code>onChange</code> : changement de valeur dans un champ de formulaire</li>\n<li><code>onSubmit</code> : soumission de formulaire</li>\n<li><code>onMouseEnter</code> / <code>onMouseLeave</code> : interactions souris</li>\n<li><code>onKeyDown</code>, <code>onKeyUp</code> : clavier</li>\n<li><code>onFocus</code>, <code>onBlur</code> : focus sur un champ</li>\n</ul><h3>Résumé</h3><ul>\n<li>React gère les événements avec un système unifié.</li>\n<li>Utilisez le camelCase et passez des fonctions comme handlers.</li>\n<li>Empêchez les comportements par défaut avec <code>preventDefault()</code>.</li>\n</ul><p>Maîtriser les événements React est essentiel pour créer des interfaces interactives.</p>"
},{
  "title": "Rendu conditionnel dans React",
  "description": "<h2>Rendu conditionnel dans React</h2><p>Le rendu conditionnel permet d’afficher ou non certains éléments de l’interface en fonction d’une condition.</p><h3>Utiliser un if simple</h3><pre><code>function Greeting(props) {\n  const isLoggedIn = props.isLoggedIn;\n  if (isLoggedIn) {\n    return &lt;h1&gt;Bienvenue&lt;/h1&gt;;\n  }\n  return &lt;h1&gt;Veuillez vous connecter&lt;/h1&gt;;\n}\n</code></pre><p>Ici, le composant affiche un message différent selon la valeur de <code>isLoggedIn</code>.</p><h3>Utiliser un opérateur ternaire</h3><pre><code>function Greeting(props) {\n  return (\n    &lt;div&gt;\n      {props.isLoggedIn ? &lt;h1&gt;Bienvenue&lt;/h1&gt; : &lt;h1&gt;Veuillez vous connecter&lt;/h1&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre><p>Une syntaxe plus concise pour afficher l’un ou l’autre.</p><h3>Rendu conditionnel avec <code>&&</code></h3><pre><code>function Mailbox(props) {\n  const unreadMessages = props.unreadMessages;\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Bonjour !&lt;/h1&gt;\n      {unreadMessages.length &gt; 0 && (\n        &lt;h2&gt;Vous avez {unreadMessages.length} messages non lus.&lt;/h2&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre><p>Si la condition est vraie, le bloc JSX est affiché, sinon rien n’est affiché.</p><h3>Rendu avec switch ou fonctions</h3><p>Pour des conditions multiples, vous pouvez utiliser un <code>switch</code> ou une fonction dédiée qui retourne différents composants.</p><h3>Résumé</h3><ul>\n<li>Utilisez <code>if</code>, opérateur ternaire, ou <code>&&</code> selon le besoin.</li>\n<li>Le rendu conditionnel rend React flexible et puissant.</li>\n<li>Gardez la logique simple pour une meilleure lisibilité.</li>\n</ul>"
},{
  "title": "Gestion des événements en React",
  "description": "<h2>Gestion des événements en React</h2><p>React utilise une syntaxe proche du DOM standard mais avec quelques différences importantes.</p><h3>Écouteurs d'événements</h3><p>Pour écouter un événement, on passe une fonction callback à un attribut JSX correspondant à l'événement, avec une syntaxe camelCase.</p><pre><code>&lt;button onClick={handleClick}&gt;Cliquez-moi&lt;/button&gt;</code></pre><p>Notez que <code>onClick</code> commence par une majuscule, contrairement à HTML.</p><h3>Fonctions de gestion d’événements</h3><pre><code>function handleClick() {\n  alert('Bouton cliqué !');\n}\n</code></pre><p>La fonction est appelée quand l’événement survient.</p><h3>Passer des arguments aux gestionnaires</h3><pre><code>&lt;button onClick={() =&gt; handleClick('param')}&gt;Cliquez-moi&lt;/button&gt;</code></pre><p>On utilise une fonction fléchée pour transmettre des paramètres.</p><h3>Événements synthétiques</h3><p>React fournit un système d’événements synthétiques qui est cross-browser compatible.</p><h3>Précautions</h3><ul>\n<li>Ne mettez pas de parenthèses dans l’attribut d’événement (ex: <code>onClick={handleClick}</code> et non <code>onClick={handleClick()}</code>).</li>\n<li>Les événements sont attachés au document, pas directement aux éléments.</li>\n</ul><h3>Résumé</h3><p>La gestion des événements en React est simple et intuitive, avec une syntaxe proche du HTML mais plus flexible grâce à JSX.</p>"
},{
  "title": "Le State en React",
  "description": "<h2>Le State en React</h2><p>Le state est un objet qui contient les données propres à un composant React et qui peuvent changer au cours de la vie du composant.</p><h3>Utilisation du useState</h3><p>Dans un composant fonctionnel, on utilise le hook <code>useState</code> pour gérer le state.</p><pre><code>import React, { useState } from 'react';\n\nfunction Compteur() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Vous avez cliqué {count} fois&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Cliquez-moi&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><h3>Explication</h3><ul>\n<li><code>count</code> est la valeur actuelle du state.</li>\n<li><code>setCount</code> est la fonction pour modifier cette valeur.</li>\n<li>Le hook <code>useState(0)</code> initialise <code>count</code> à 0.</li>\n</ul><h3>Pourquoi utiliser le state ?</h3><p>Le state permet au composant de réagir aux interactions de l’utilisateur ou à d’autres événements, et de mettre à jour son affichage en conséquence.</p><h3>State vs Props</h3><p>Le state est privé au composant, tandis que les props sont des données passées depuis un composant parent.</p>"
},{
  "title": "Les Props en React",
  "description": "<h2>Les Props en React</h2><p>Les props (propriétés) sont des données passées d’un composant parent à un composant enfant. Elles permettent de personnaliser ou configurer le comportement ou l’affichage d’un composant.</p><h3>Exemple simple</h3><pre><code>function Salutation(props) {\n  return &lt;h1&gt;Bonjour, {props.nom} !&lt;/h1&gt;;\n}\n\nfunction App() {\n  return &lt;Salutation nom=\"Alice\" /&gt;;\n}\n</code></pre><p>Dans cet exemple, le composant <code>Salutation</code> reçoit une prop <code>nom</code> et l’utilise pour afficher un message personnalisé.</p><h3>Caractéristiques des Props</h3><ul>\n<li>Les props sont immuables à l’intérieur du composant qui les reçoit.</li>\n<li>Un composant peut recevoir autant de props qu’on souhaite.</li>\n<li>Les props peuvent être de tout type : chaînes, nombres, fonctions, objets, etc.</li>\n</ul><h3>Passer une fonction en prop</h3><p>On peut passer une fonction en prop pour que l’enfant puisse notifier ou interagir avec le parent.</p><pre><code>function Bouton(props) {\n  return &lt;button onClick={props.onClick}&gt;Cliquez-moi&lt;/button&gt;;\n}\n\nfunction App() {\n  function handleClick() {\n    alert('Bouton cliqué !');\n  }\n\n  return &lt;Bouton onClick={handleClick} /&gt;;\n}\n</code></pre>"
},{
  "title": "Méthodes du cycle de vie React",
  "description": "<h2>Méthodes du cycle de vie React</h2><p>Les méthodes du cycle de vie dans React sont des fonctions spéciales qui s'exécutent à différentes étapes de la vie d'un composant, permettant de gérer le comportement lors de sa création, mise à jour et destruction. Ces méthodes sont principalement utilisées dans les composants basés sur les classes.</p><h3>Les principales méthodes du cycle de vie</h3><ul><li><strong>constructor()</strong> : initialisation de l'état local et liaison des méthodes.</li><li><strong>componentDidMount()</strong> : appelée juste après que le composant est inséré dans le DOM. Idéal pour les appels API ou initialisations.</li><li><strong>shouldComponentUpdate()</strong> : permet de contrôler si le composant doit se re-render (optimisation).</li><li><strong>componentDidUpdate()</strong> : appelée après chaque mise à jour du composant.</li><li><strong>componentWillUnmount()</strong> : appelée juste avant que le composant soit retiré du DOM, utile pour le nettoyage (timers, listeners).</li></ul><h3>Exemple complet</h3><pre><code>class Exemple extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { compteur: 0 };\n  }\n\n  componentDidMount() {\n    console.log('Composant monté');\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextState.compteur !== this.state.compteur;\n  }\n\n  componentDidUpdate() {\n    console.log('Composant mis à jour');\n  }\n\n  componentWillUnmount() {\n    console.log('Composant va être démonté');\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Compteur : {this.state.compteur}</p>\n        <button onClick={() => this.setState({ compteur: this.state.compteur + 1 })}>\n          Incrémenter\n        </button>\n      </div>\n    );\n  }\n}</code></pre><h3>Note importante</h3><p>Avec l’introduction des Hooks (notamment <code>useEffect</code>), les méthodes du cycle de vie sont moins utilisées dans les composants fonctionnels, qui sont désormais la norme pour la plupart des nouveaux projets React.</p>"
},{
  "title": "Hooks React",
  "description": "<h2>Hooks React</h2><p>Les Hooks sont une nouveauté introduite dans React 16.8 qui permettent d’utiliser l’état et d’autres fonctionnalités React dans les composants fonctionnels, sans écrire de classes.</p><h3>Les hooks principaux</h3><ul><li><code>useState</code> : permet de gérer l’état local dans un composant fonctionnel.</li><li><code>useEffect</code> : remplace les méthodes du cycle de vie, permet de gérer les effets de bord (fetch, timers, abonnements...).</li><li><code>useContext</code> : permet d’accéder au contexte React sans passer par les props.</li></ul><h3>Exemple simple avec useState</h3><pre><code>import React, { useState } from 'react';\n\nfunction Compteur() {\n  const [compteur, setCompteur] = useState(0);\n\n  return (\n    <div>\n      <p>Compteur : {compteur}</p>\n      <button onClick={() => setCompteur(compteur + 1)}>\n        Incrémenter\n      </button>\n    </div>\n  );\n}</code></pre><h3>Exemple avec useEffect</h3><pre><code>import React, { useState, useEffect } from 'react';\n\nfunction Horloge() {\n  const [heure, setHeure] = useState(new Date());\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setHeure(new Date());\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  return <p>Il est {heure.toLocaleTimeString()}</p>;\n}</code></pre><h3>Résumé</h3><ul><li>Les Hooks simplifient la gestion de l’état et des effets dans React.</li><li>Ils rendent les composants fonctionnels aussi puissants que les classes.</li><li>Respectez les règles des Hooks : appel uniquement au sommet des fonctions, et uniquement dans des composants React ou des Hooks personnalisés.</li></ul>"
},{
  "title": "React Router",
  "description": "<h2>React Router</h2><p>React Router est une bibliothèque qui permet de gérer la navigation dans les applications React à page unique (SPA).</p><h3>Installation</h3><pre><code>npm install react-router-dom</code></pre><h3>Concepts clés</h3><ul><li><code>BrowserRouter</code> : conteneur principal qui gère l’historique du navigateur.</li><li><code>Routes</code> et <code>Route</code> : définissent les chemins URL et les composants à rendre.</li><li><code>Link</code> : remplace les &lt;a&gt; pour la navigation interne.</li></ul><h3>Exemple simple</h3><pre><code>import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <nav>\n        <Link to=\"/\">Accueil</Link>\n        <Link to=\"/about\">À propos</Link>\n      </nav>\n      <Routes>\n        <Route path=\"/\" element={<Accueil />} />\n        <Route path=\"/about\" element={<About />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}</code></pre><h3>Résumé</h3><ul><li>React Router facilite la navigation entre vues sans rechargement complet.</li><li>Utilisez les composants dédiés pour définir les routes et les liens.</li></ul>"
}


    ]
  },
  {
    "name": "Git",
    "description": "Git est un système de contrôle de version distribué qui permet de suivre les modifications du code source, collaborer efficacement, et gérer les versions des projets de développement.",
    "articles": [
      {
        "title": "Introduction à Git",
        "description": "Comprenez le rôle de Git dans le développement, installation et premiers pas."
      },
      {
        "title": "Les commandes Git essentielles",
        "description": "Découvrez les commandes de base : init, clone, add, commit, push, pull, status."
      },
      {
        "title": "Branches et fusion",
        "description": "Apprenez à créer, gérer et fusionner des branches pour un développement parallèle et sécurisé."
      },
      {
        "title": "Gestion des conflits",
        "description": "Comprenez comment résoudre les conflits lors de la fusion et maintenir un historique propre."
      }
    ]
  }
]